//
// File generated by /nfs/hicran/project/belle/basf2/externals/v00-03-03/build/root/Linux_i686/debug/bin/rootcint at Thu Mar 28 15:50:56 2013

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dInfsdIhicrandIprojectdIpandadISIMdIjrauchdIgenfitStandalonedIbranchesdIgenfit2dIUMLdICodeGeneratorOutputdIgenfitDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "genfitDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      namespace genfit {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::genfit::AbsFinitePlane AbsFinitePlane;
      #else
      class AbsFinitePlane  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~AbsFinitePlane() throw() {};
      };
      #endif
      } 
      namespace genfit {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::genfit::AbsFitterInfo AbsFitterInfo;
      #else
      class AbsFitterInfo  {
         public:
         //friend XX;
      };
      #endif
      } 
      namespace genfit {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::genfit::DetPlane DetPlane;
      #else
      class DetPlane  {
         public:
         //friend XX;
         ::TVector3 o_; //
         ::TVector3 u_; //
         ::TVector3 v_; //
         ::genfit::AbsFinitePlane* finitePlane_; //
      };
      #endif
      } 
      namespace genfit {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::genfit::AbsTrackRep AbsTrackRep;
      #else
      class AbsTrackRep  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~AbsTrackRep() throw() {};
         int pdgCode_; //
      };
      #endif
      } 
      namespace genfit {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::genfit::StateOnPlane StateOnPlane;
      #else
      class StateOnPlane  {
         public:
         //friend XX;
         ::TVectorT< double > state_; //
         ::genfit::DetPlane* sharedPlane_; //
         ::genfit::AbsTrackRep* rep_; //
      };
      #endif
      } 
      namespace genfit {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::genfit::MeasuredStateOnPlane MeasuredStateOnPlane;
      #else
      class MeasuredStateOnPlane  :  public ::genfit::StateOnPlane {
         public:
         //friend XX;
         ::TMatrixTSym< double > cov_; //
      };
      #endif
      } 
      namespace genfit {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::genfit::KalmanFittedStateOnPlane KalmanFittedStateOnPlane;
      #else
      class KalmanFittedStateOnPlane  :  public ::genfit::MeasuredStateOnPlane {
         public:
         //friend XX;
         double chiSquareIncrement_; //
         double ndf_; //
      };
      #endif
      } 
      namespace genfit {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::genfit::ReferenceStateOnPlane ReferenceStateOnPlane;
      #else
      class ReferenceStateOnPlane  :  public ::genfit::StateOnPlane {
         public:
         //friend XX;
         double forwardSegmentLength_; //
         double backwardSegmentLength_; //
         ::TMatrixT< double > forwardTransportMatrix; //
         ::TMatrixT< double > backwardTransportMatrix; //
         ::TMatrixTSym< double > forwardNoiseMatrix; //
         ::TMatrixTSym< double > backwardNoiseMatrix; //
      };
      #endif
      } 
      namespace genfit {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::genfit::KalmanFitterInfo KalmanFitterInfo;
      #else
      class KalmanFitterInfo  :  public ::genfit::AbsFitterInfo {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~KalmanFitterInfo() throw() {};
         ::genfit::ReferenceStateOnPlane* referenceState_; //
         ::genfit::MeasuredStateOnPlane* forwardPrediction_; //
         ::genfit::KalmanFittedStateOnPlane* forwardUpdate_; //
         ::genfit::MeasuredStateOnPlane* backwardPrediction_; //
         ::genfit::KalmanFittedStateOnPlane* backwardUpdate_; //
         vector< ::MeasurementOnPlane > measurementsOnPlane_; //
         ::genfit::AbsTrackRep* rep_; //
      };
      #endif
      } 
      namespace genfit {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::genfit::TrackPoint TrackPoint;
      #else
      class TrackPoint  {
         public:
         //friend XX;
         double sortingParameter_; //
         ::genfit::Track* trackPoints_; //
         vector< AbsMeasurement* > rawMeasurements_; //
         vector< KalmanFitterInfo > fitterInfos_; //
         ::genfit::MaterialInfo* material_; //
      };
      #endif
      } 
      namespace genfit {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::genfit::AbsMeasurement AbsMeasurement;
      #else
      class AbsMeasurement  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~AbsMeasurement() throw() {};
         ::TVectorT< double > rawHitCoords_; //
         ::TMatrixTSym< double > rawHitCov_; //
         int detId_; //
         int hitId_; //
         ::genfit::TrackPoint* rawMeasurements_; //
      };
      #endif
      } 
      namespace genfit {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::genfit::SpacePointMeasurement SpacePointMeasurement;
      #else
      class SpacePointMeasurement  :  public ::genfit::AbsMeasurement {
         public:
         //friend XX;
      };
      #endif
      } 
      namespace genfit {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::genfit::ProlateSpacePointMeasurement ProlateSpacePointMeasurement;
      #else
      class ProlateSpacePointMeasurement  :  public ::genfit::SpacePointMeasurement {
         public:
         //friend XX;
      };
      #endif
      } 
      namespace genfit {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::genfit::TrackCandHit TrackCandHit;
      #else
      class TrackCandHit  {
         public:
         //friend XX;
      };
      #endif
      } 
      namespace genfit {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::genfit::MaterialInfo MaterialInfo;
      #else
      class MaterialInfo  {
         public:
         //friend XX;
         ::genfit::DetPlane* sharedPlane_; //
      };
      #endif
      } 
      namespace genfit {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::genfit::RectangularFinitePlane RectangularFinitePlane;
      #else
      class RectangularFinitePlane  :  public ::genfit::AbsFinitePlane {
         public:
         //friend XX;
      };
      #endif
      } 
      namespace genfit {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::genfit::Track Track;
      #else
      class Track  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~Track() throw() {};
         vector< TrackPoint > trackPoints_; //
         vector< AbsTrackRep* > trackReps_; //
      };
      #endif
      } 
      namespace genfit {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::genfit::PlanarMeasurement PlanarMeasurement;
      #else
      class PlanarMeasurement  :  public ::genfit::AbsMeasurement {
         public:
         //friend XX;
         int planeId_; //
      };
      #endif
      } 
      namespace genfit {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::genfit::WireMeasurement WireMeasurement;
      #else
      class WireMeasurement  :  public ::genfit::AbsMeasurement {
         public:
         //friend XX;
         double leftRight_; //
      };
      #endif
      } 
      namespace genfit {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::genfit::PlanarPixelMeasurement PlanarPixelMeasurement;
      #else
      class PlanarPixelMeasurement  :  public ::genfit::PlanarMeasurement {
         public:
         //friend XX;
      };
      #endif
      } 
      namespace genfit {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::genfit::WirePointMeasurement WirePointMeasurement;
      #else
      class WirePointMeasurement  :  public ::genfit::WireMeasurement {
         public:
         //friend XX;
      };
      #endif
      } 
      namespace genfit {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::genfit::PlanarStripMeasurement PlanarStripMeasurement;
      #else
      class PlanarStripMeasurement  :  public ::genfit::PlanarMeasurement {
         public:
         //friend XX;
      };
      #endif
      } 
      namespace genfit {

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::genfit::TrackCand TrackCand;
      #else
      class TrackCand  {
         public:
         //friend XX;
         vector< TrackCandHit > myTrackCandHit; //
      };
      #endif
      } 
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void genfitcLcLAbsFinitePlane_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void genfitcLcLAbsFinitePlane_Dictionary();
   static void *new_genfitcLcLAbsFinitePlane(void *p = 0);
   static void *newArray_genfitcLcLAbsFinitePlane(Long_t size, void *p);
   static void delete_genfitcLcLAbsFinitePlane(void *p);
   static void deleteArray_genfitcLcLAbsFinitePlane(void *p);
   static void destruct_genfitcLcLAbsFinitePlane(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::AbsFinitePlane*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::genfit::AbsFinitePlane) == sizeof(::ROOT::Shadow::genfit::AbsFinitePlane));
      ::genfit::AbsFinitePlane *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genfit::AbsFinitePlane),0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::AbsFinitePlane", "./../include/AbsFinitePlane.h", 7,
                  typeid(::genfit::AbsFinitePlane), DefineBehavior(ptr, ptr),
                  &genfitcLcLAbsFinitePlane_ShowMembers, &genfitcLcLAbsFinitePlane_Dictionary, isa_proxy, 4,
                  sizeof(::genfit::AbsFinitePlane) );
      instance.SetNew(&new_genfitcLcLAbsFinitePlane);
      instance.SetNewArray(&newArray_genfitcLcLAbsFinitePlane);
      instance.SetDelete(&delete_genfitcLcLAbsFinitePlane);
      instance.SetDeleteArray(&deleteArray_genfitcLcLAbsFinitePlane);
      instance.SetDestructor(&destruct_genfitcLcLAbsFinitePlane);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::genfit::AbsFinitePlane*)
   {
      return GenerateInitInstanceLocal((::genfit::AbsFinitePlane*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::AbsFinitePlane*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void genfitcLcLAbsFinitePlane_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::genfit::AbsFinitePlane*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void genfitcLcLAbsFitterInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void genfitcLcLAbsFitterInfo_Dictionary();
   static void *new_genfitcLcLAbsFitterInfo(void *p = 0);
   static void *newArray_genfitcLcLAbsFitterInfo(Long_t size, void *p);
   static void delete_genfitcLcLAbsFitterInfo(void *p);
   static void deleteArray_genfitcLcLAbsFitterInfo(void *p);
   static void destruct_genfitcLcLAbsFitterInfo(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::AbsFitterInfo*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::genfit::AbsFitterInfo) == sizeof(::ROOT::Shadow::genfit::AbsFitterInfo));
      ::genfit::AbsFitterInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genfit::AbsFitterInfo),0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::AbsFitterInfo", "./../include/AbsFitterInfo.h", 11,
                  typeid(::genfit::AbsFitterInfo), DefineBehavior(ptr, ptr),
                  &genfitcLcLAbsFitterInfo_ShowMembers, &genfitcLcLAbsFitterInfo_Dictionary, isa_proxy, 4,
                  sizeof(::genfit::AbsFitterInfo) );
      instance.SetNew(&new_genfitcLcLAbsFitterInfo);
      instance.SetNewArray(&newArray_genfitcLcLAbsFitterInfo);
      instance.SetDelete(&delete_genfitcLcLAbsFitterInfo);
      instance.SetDeleteArray(&deleteArray_genfitcLcLAbsFitterInfo);
      instance.SetDestructor(&destruct_genfitcLcLAbsFitterInfo);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::genfit::AbsFitterInfo*)
   {
      return GenerateInitInstanceLocal((::genfit::AbsFitterInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::AbsFitterInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void genfitcLcLAbsFitterInfo_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::genfit::AbsFitterInfo*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void genfitcLcLDetPlane_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void genfitcLcLDetPlane_Dictionary();
   static void *new_genfitcLcLDetPlane(void *p = 0);
   static void *newArray_genfitcLcLDetPlane(Long_t size, void *p);
   static void delete_genfitcLcLDetPlane(void *p);
   static void deleteArray_genfitcLcLDetPlane(void *p);
   static void destruct_genfitcLcLDetPlane(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::DetPlane*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::genfit::DetPlane) == sizeof(::ROOT::Shadow::genfit::DetPlane));
      ::genfit::DetPlane *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genfit::DetPlane),0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::DetPlane", "./../include/DetPlane.h", 12,
                  typeid(::genfit::DetPlane), DefineBehavior(ptr, ptr),
                  &genfitcLcLDetPlane_ShowMembers, &genfitcLcLDetPlane_Dictionary, isa_proxy, 4,
                  sizeof(::genfit::DetPlane) );
      instance.SetNew(&new_genfitcLcLDetPlane);
      instance.SetNewArray(&newArray_genfitcLcLDetPlane);
      instance.SetDelete(&delete_genfitcLcLDetPlane);
      instance.SetDeleteArray(&deleteArray_genfitcLcLDetPlane);
      instance.SetDestructor(&destruct_genfitcLcLDetPlane);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::genfit::DetPlane*)
   {
      return GenerateInitInstanceLocal((::genfit::DetPlane*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::DetPlane*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void genfitcLcLDetPlane_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::genfit::DetPlane*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void genfitcLcLAbsTrackRep_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void genfitcLcLAbsTrackRep_Dictionary();
   static void *new_genfitcLcLAbsTrackRep(void *p = 0);
   static void *newArray_genfitcLcLAbsTrackRep(Long_t size, void *p);
   static void delete_genfitcLcLAbsTrackRep(void *p);
   static void deleteArray_genfitcLcLAbsTrackRep(void *p);
   static void destruct_genfitcLcLAbsTrackRep(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::AbsTrackRep*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::genfit::AbsTrackRep) == sizeof(::ROOT::Shadow::genfit::AbsTrackRep));
      ::genfit::AbsTrackRep *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genfit::AbsTrackRep),0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::AbsTrackRep", "./../include/AbsTrackRep.h", 15,
                  typeid(::genfit::AbsTrackRep), DefineBehavior(ptr, ptr),
                  &genfitcLcLAbsTrackRep_ShowMembers, &genfitcLcLAbsTrackRep_Dictionary, isa_proxy, 4,
                  sizeof(::genfit::AbsTrackRep) );
      instance.SetNew(&new_genfitcLcLAbsTrackRep);
      instance.SetNewArray(&newArray_genfitcLcLAbsTrackRep);
      instance.SetDelete(&delete_genfitcLcLAbsTrackRep);
      instance.SetDeleteArray(&deleteArray_genfitcLcLAbsTrackRep);
      instance.SetDestructor(&destruct_genfitcLcLAbsTrackRep);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::genfit::AbsTrackRep*)
   {
      return GenerateInitInstanceLocal((::genfit::AbsTrackRep*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::AbsTrackRep*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void genfitcLcLAbsTrackRep_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::genfit::AbsTrackRep*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void genfitcLcLStateOnPlane_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void genfitcLcLStateOnPlane_Dictionary();
   static void delete_genfitcLcLStateOnPlane(void *p);
   static void deleteArray_genfitcLcLStateOnPlane(void *p);
   static void destruct_genfitcLcLStateOnPlane(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::StateOnPlane*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::genfit::StateOnPlane) == sizeof(::ROOT::Shadow::genfit::StateOnPlane));
      ::genfit::StateOnPlane *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genfit::StateOnPlane),0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::StateOnPlane", "./../include/StateOnPlane.h", 21,
                  typeid(::genfit::StateOnPlane), DefineBehavior(ptr, ptr),
                  &genfitcLcLStateOnPlane_ShowMembers, &genfitcLcLStateOnPlane_Dictionary, isa_proxy, 4,
                  sizeof(::genfit::StateOnPlane) );
      instance.SetDelete(&delete_genfitcLcLStateOnPlane);
      instance.SetDeleteArray(&deleteArray_genfitcLcLStateOnPlane);
      instance.SetDestructor(&destruct_genfitcLcLStateOnPlane);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::genfit::StateOnPlane*)
   {
      return GenerateInitInstanceLocal((::genfit::StateOnPlane*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::StateOnPlane*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void genfitcLcLStateOnPlane_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::genfit::StateOnPlane*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void genfitcLcLMeasuredStateOnPlane_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void genfitcLcLMeasuredStateOnPlane_Dictionary();
   static void *new_genfitcLcLMeasuredStateOnPlane(void *p = 0);
   static void *newArray_genfitcLcLMeasuredStateOnPlane(Long_t size, void *p);
   static void delete_genfitcLcLMeasuredStateOnPlane(void *p);
   static void deleteArray_genfitcLcLMeasuredStateOnPlane(void *p);
   static void destruct_genfitcLcLMeasuredStateOnPlane(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::MeasuredStateOnPlane*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::genfit::MeasuredStateOnPlane) == sizeof(::ROOT::Shadow::genfit::MeasuredStateOnPlane));
      ::genfit::MeasuredStateOnPlane *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genfit::MeasuredStateOnPlane),0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::MeasuredStateOnPlane", "./../include/MeasuredStateOnPlane.h", 15,
                  typeid(::genfit::MeasuredStateOnPlane), DefineBehavior(ptr, ptr),
                  &genfitcLcLMeasuredStateOnPlane_ShowMembers, &genfitcLcLMeasuredStateOnPlane_Dictionary, isa_proxy, 4,
                  sizeof(::genfit::MeasuredStateOnPlane) );
      instance.SetNew(&new_genfitcLcLMeasuredStateOnPlane);
      instance.SetNewArray(&newArray_genfitcLcLMeasuredStateOnPlane);
      instance.SetDelete(&delete_genfitcLcLMeasuredStateOnPlane);
      instance.SetDeleteArray(&deleteArray_genfitcLcLMeasuredStateOnPlane);
      instance.SetDestructor(&destruct_genfitcLcLMeasuredStateOnPlane);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::genfit::MeasuredStateOnPlane*)
   {
      return GenerateInitInstanceLocal((::genfit::MeasuredStateOnPlane*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::MeasuredStateOnPlane*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void genfitcLcLMeasuredStateOnPlane_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::genfit::MeasuredStateOnPlane*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void genfitcLcLKalmanFittedStateOnPlane_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void genfitcLcLKalmanFittedStateOnPlane_Dictionary();
   static void *new_genfitcLcLKalmanFittedStateOnPlane(void *p = 0);
   static void *newArray_genfitcLcLKalmanFittedStateOnPlane(Long_t size, void *p);
   static void delete_genfitcLcLKalmanFittedStateOnPlane(void *p);
   static void deleteArray_genfitcLcLKalmanFittedStateOnPlane(void *p);
   static void destruct_genfitcLcLKalmanFittedStateOnPlane(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::KalmanFittedStateOnPlane*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::genfit::KalmanFittedStateOnPlane) == sizeof(::ROOT::Shadow::genfit::KalmanFittedStateOnPlane));
      ::genfit::KalmanFittedStateOnPlane *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genfit::KalmanFittedStateOnPlane),0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::KalmanFittedStateOnPlane", "./../include/KalmanFittedStateOnPlane.h", 13,
                  typeid(::genfit::KalmanFittedStateOnPlane), DefineBehavior(ptr, ptr),
                  &genfitcLcLKalmanFittedStateOnPlane_ShowMembers, &genfitcLcLKalmanFittedStateOnPlane_Dictionary, isa_proxy, 4,
                  sizeof(::genfit::KalmanFittedStateOnPlane) );
      instance.SetNew(&new_genfitcLcLKalmanFittedStateOnPlane);
      instance.SetNewArray(&newArray_genfitcLcLKalmanFittedStateOnPlane);
      instance.SetDelete(&delete_genfitcLcLKalmanFittedStateOnPlane);
      instance.SetDeleteArray(&deleteArray_genfitcLcLKalmanFittedStateOnPlane);
      instance.SetDestructor(&destruct_genfitcLcLKalmanFittedStateOnPlane);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::genfit::KalmanFittedStateOnPlane*)
   {
      return GenerateInitInstanceLocal((::genfit::KalmanFittedStateOnPlane*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::KalmanFittedStateOnPlane*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void genfitcLcLKalmanFittedStateOnPlane_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::genfit::KalmanFittedStateOnPlane*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void genfitcLcLReferenceStateOnPlane_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void genfitcLcLReferenceStateOnPlane_Dictionary();
   static void *new_genfitcLcLReferenceStateOnPlane(void *p = 0);
   static void *newArray_genfitcLcLReferenceStateOnPlane(Long_t size, void *p);
   static void delete_genfitcLcLReferenceStateOnPlane(void *p);
   static void deleteArray_genfitcLcLReferenceStateOnPlane(void *p);
   static void destruct_genfitcLcLReferenceStateOnPlane(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::ReferenceStateOnPlane*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::genfit::ReferenceStateOnPlane) == sizeof(::ROOT::Shadow::genfit::ReferenceStateOnPlane));
      ::genfit::ReferenceStateOnPlane *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genfit::ReferenceStateOnPlane),0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::ReferenceStateOnPlane", "./../include/ReferenceStateOnPlane.h", 13,
                  typeid(::genfit::ReferenceStateOnPlane), DefineBehavior(ptr, ptr),
                  &genfitcLcLReferenceStateOnPlane_ShowMembers, &genfitcLcLReferenceStateOnPlane_Dictionary, isa_proxy, 4,
                  sizeof(::genfit::ReferenceStateOnPlane) );
      instance.SetNew(&new_genfitcLcLReferenceStateOnPlane);
      instance.SetNewArray(&newArray_genfitcLcLReferenceStateOnPlane);
      instance.SetDelete(&delete_genfitcLcLReferenceStateOnPlane);
      instance.SetDeleteArray(&deleteArray_genfitcLcLReferenceStateOnPlane);
      instance.SetDestructor(&destruct_genfitcLcLReferenceStateOnPlane);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::genfit::ReferenceStateOnPlane*)
   {
      return GenerateInitInstanceLocal((::genfit::ReferenceStateOnPlane*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::ReferenceStateOnPlane*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void genfitcLcLReferenceStateOnPlane_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::genfit::ReferenceStateOnPlane*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void genfitcLcLKalmanFitterInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void genfitcLcLKalmanFitterInfo_Dictionary();
   static void *new_genfitcLcLKalmanFitterInfo(void *p = 0);
   static void *newArray_genfitcLcLKalmanFitterInfo(Long_t size, void *p);
   static void delete_genfitcLcLKalmanFitterInfo(void *p);
   static void deleteArray_genfitcLcLKalmanFitterInfo(void *p);
   static void destruct_genfitcLcLKalmanFitterInfo(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::KalmanFitterInfo*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::genfit::KalmanFitterInfo) == sizeof(::ROOT::Shadow::genfit::KalmanFitterInfo));
      ::genfit::KalmanFitterInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genfit::KalmanFitterInfo),0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::KalmanFitterInfo", "./../include/KalmanFitterInfo.h", 24,
                  typeid(::genfit::KalmanFitterInfo), DefineBehavior(ptr, ptr),
                  &genfitcLcLKalmanFitterInfo_ShowMembers, &genfitcLcLKalmanFitterInfo_Dictionary, isa_proxy, 4,
                  sizeof(::genfit::KalmanFitterInfo) );
      instance.SetNew(&new_genfitcLcLKalmanFitterInfo);
      instance.SetNewArray(&newArray_genfitcLcLKalmanFitterInfo);
      instance.SetDelete(&delete_genfitcLcLKalmanFitterInfo);
      instance.SetDeleteArray(&deleteArray_genfitcLcLKalmanFitterInfo);
      instance.SetDestructor(&destruct_genfitcLcLKalmanFitterInfo);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::genfit::KalmanFitterInfo*)
   {
      return GenerateInitInstanceLocal((::genfit::KalmanFitterInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::KalmanFitterInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void genfitcLcLKalmanFitterInfo_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::genfit::KalmanFitterInfo*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void genfitcLcLTrackPoint_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void genfitcLcLTrackPoint_Dictionary();
   static void *new_genfitcLcLTrackPoint(void *p = 0);
   static void *newArray_genfitcLcLTrackPoint(Long_t size, void *p);
   static void delete_genfitcLcLTrackPoint(void *p);
   static void deleteArray_genfitcLcLTrackPoint(void *p);
   static void destruct_genfitcLcLTrackPoint(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::TrackPoint*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::genfit::TrackPoint) == sizeof(::ROOT::Shadow::genfit::TrackPoint));
      ::genfit::TrackPoint *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genfit::TrackPoint),0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::TrackPoint", "./../include/TrackPoint.h", 16,
                  typeid(::genfit::TrackPoint), DefineBehavior(ptr, ptr),
                  &genfitcLcLTrackPoint_ShowMembers, &genfitcLcLTrackPoint_Dictionary, isa_proxy, 4,
                  sizeof(::genfit::TrackPoint) );
      instance.SetNew(&new_genfitcLcLTrackPoint);
      instance.SetNewArray(&newArray_genfitcLcLTrackPoint);
      instance.SetDelete(&delete_genfitcLcLTrackPoint);
      instance.SetDeleteArray(&deleteArray_genfitcLcLTrackPoint);
      instance.SetDestructor(&destruct_genfitcLcLTrackPoint);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::genfit::TrackPoint*)
   {
      return GenerateInitInstanceLocal((::genfit::TrackPoint*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::TrackPoint*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void genfitcLcLTrackPoint_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::genfit::TrackPoint*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void genfitcLcLAbsMeasurement_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void genfitcLcLAbsMeasurement_Dictionary();
   static void *new_genfitcLcLAbsMeasurement(void *p = 0);
   static void *newArray_genfitcLcLAbsMeasurement(Long_t size, void *p);
   static void delete_genfitcLcLAbsMeasurement(void *p);
   static void deleteArray_genfitcLcLAbsMeasurement(void *p);
   static void destruct_genfitcLcLAbsMeasurement(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::AbsMeasurement*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::genfit::AbsMeasurement) == sizeof(::ROOT::Shadow::genfit::AbsMeasurement));
      ::genfit::AbsMeasurement *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genfit::AbsMeasurement),0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::AbsMeasurement", "./../include/AbsMeasurement.h", 17,
                  typeid(::genfit::AbsMeasurement), DefineBehavior(ptr, ptr),
                  &genfitcLcLAbsMeasurement_ShowMembers, &genfitcLcLAbsMeasurement_Dictionary, isa_proxy, 4,
                  sizeof(::genfit::AbsMeasurement) );
      instance.SetNew(&new_genfitcLcLAbsMeasurement);
      instance.SetNewArray(&newArray_genfitcLcLAbsMeasurement);
      instance.SetDelete(&delete_genfitcLcLAbsMeasurement);
      instance.SetDeleteArray(&deleteArray_genfitcLcLAbsMeasurement);
      instance.SetDestructor(&destruct_genfitcLcLAbsMeasurement);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::genfit::AbsMeasurement*)
   {
      return GenerateInitInstanceLocal((::genfit::AbsMeasurement*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::AbsMeasurement*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void genfitcLcLAbsMeasurement_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::genfit::AbsMeasurement*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void genfitcLcLSpacePointMeasurement_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void genfitcLcLSpacePointMeasurement_Dictionary();
   static void *new_genfitcLcLSpacePointMeasurement(void *p = 0);
   static void *newArray_genfitcLcLSpacePointMeasurement(Long_t size, void *p);
   static void delete_genfitcLcLSpacePointMeasurement(void *p);
   static void deleteArray_genfitcLcLSpacePointMeasurement(void *p);
   static void destruct_genfitcLcLSpacePointMeasurement(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::SpacePointMeasurement*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::genfit::SpacePointMeasurement) == sizeof(::ROOT::Shadow::genfit::SpacePointMeasurement));
      ::genfit::SpacePointMeasurement *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genfit::SpacePointMeasurement),0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::SpacePointMeasurement", "./../include/SpacePointMeasurement.h", 9,
                  typeid(::genfit::SpacePointMeasurement), DefineBehavior(ptr, ptr),
                  &genfitcLcLSpacePointMeasurement_ShowMembers, &genfitcLcLSpacePointMeasurement_Dictionary, isa_proxy, 4,
                  sizeof(::genfit::SpacePointMeasurement) );
      instance.SetNew(&new_genfitcLcLSpacePointMeasurement);
      instance.SetNewArray(&newArray_genfitcLcLSpacePointMeasurement);
      instance.SetDelete(&delete_genfitcLcLSpacePointMeasurement);
      instance.SetDeleteArray(&deleteArray_genfitcLcLSpacePointMeasurement);
      instance.SetDestructor(&destruct_genfitcLcLSpacePointMeasurement);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::genfit::SpacePointMeasurement*)
   {
      return GenerateInitInstanceLocal((::genfit::SpacePointMeasurement*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::SpacePointMeasurement*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void genfitcLcLSpacePointMeasurement_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::genfit::SpacePointMeasurement*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void genfitcLcLProlateSpacePointMeasurement_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void genfitcLcLProlateSpacePointMeasurement_Dictionary();
   static void *new_genfitcLcLProlateSpacePointMeasurement(void *p = 0);
   static void *newArray_genfitcLcLProlateSpacePointMeasurement(Long_t size, void *p);
   static void delete_genfitcLcLProlateSpacePointMeasurement(void *p);
   static void deleteArray_genfitcLcLProlateSpacePointMeasurement(void *p);
   static void destruct_genfitcLcLProlateSpacePointMeasurement(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::ProlateSpacePointMeasurement*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::genfit::ProlateSpacePointMeasurement) == sizeof(::ROOT::Shadow::genfit::ProlateSpacePointMeasurement));
      ::genfit::ProlateSpacePointMeasurement *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genfit::ProlateSpacePointMeasurement),0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::ProlateSpacePointMeasurement", "./../include/ProlateSpacePointMeasurement.h", 9,
                  typeid(::genfit::ProlateSpacePointMeasurement), DefineBehavior(ptr, ptr),
                  &genfitcLcLProlateSpacePointMeasurement_ShowMembers, &genfitcLcLProlateSpacePointMeasurement_Dictionary, isa_proxy, 4,
                  sizeof(::genfit::ProlateSpacePointMeasurement) );
      instance.SetNew(&new_genfitcLcLProlateSpacePointMeasurement);
      instance.SetNewArray(&newArray_genfitcLcLProlateSpacePointMeasurement);
      instance.SetDelete(&delete_genfitcLcLProlateSpacePointMeasurement);
      instance.SetDeleteArray(&deleteArray_genfitcLcLProlateSpacePointMeasurement);
      instance.SetDestructor(&destruct_genfitcLcLProlateSpacePointMeasurement);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::genfit::ProlateSpacePointMeasurement*)
   {
      return GenerateInitInstanceLocal((::genfit::ProlateSpacePointMeasurement*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::ProlateSpacePointMeasurement*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void genfitcLcLProlateSpacePointMeasurement_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::genfit::ProlateSpacePointMeasurement*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void genfitcLcLTrackCandHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void genfitcLcLTrackCandHit_Dictionary();
   static void *new_genfitcLcLTrackCandHit(void *p = 0);
   static void *newArray_genfitcLcLTrackCandHit(Long_t size, void *p);
   static void delete_genfitcLcLTrackCandHit(void *p);
   static void deleteArray_genfitcLcLTrackCandHit(void *p);
   static void destruct_genfitcLcLTrackCandHit(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::TrackCandHit*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::genfit::TrackCandHit) == sizeof(::ROOT::Shadow::genfit::TrackCandHit));
      ::genfit::TrackCandHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genfit::TrackCandHit),0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::TrackCandHit", "./../include/TrackCandHit.h", 7,
                  typeid(::genfit::TrackCandHit), DefineBehavior(ptr, ptr),
                  &genfitcLcLTrackCandHit_ShowMembers, &genfitcLcLTrackCandHit_Dictionary, isa_proxy, 4,
                  sizeof(::genfit::TrackCandHit) );
      instance.SetNew(&new_genfitcLcLTrackCandHit);
      instance.SetNewArray(&newArray_genfitcLcLTrackCandHit);
      instance.SetDelete(&delete_genfitcLcLTrackCandHit);
      instance.SetDeleteArray(&deleteArray_genfitcLcLTrackCandHit);
      instance.SetDestructor(&destruct_genfitcLcLTrackCandHit);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::genfit::TrackCandHit*)
   {
      return GenerateInitInstanceLocal((::genfit::TrackCandHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::TrackCandHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void genfitcLcLTrackCandHit_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::genfit::TrackCandHit*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void genfitcLcLMaterialInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void genfitcLcLMaterialInfo_Dictionary();
   static void *new_genfitcLcLMaterialInfo(void *p = 0);
   static void *newArray_genfitcLcLMaterialInfo(Long_t size, void *p);
   static void delete_genfitcLcLMaterialInfo(void *p);
   static void deleteArray_genfitcLcLMaterialInfo(void *p);
   static void destruct_genfitcLcLMaterialInfo(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::MaterialInfo*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::genfit::MaterialInfo) == sizeof(::ROOT::Shadow::genfit::MaterialInfo));
      ::genfit::MaterialInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genfit::MaterialInfo),0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::MaterialInfo", "./../include/MaterialInfo.h", 10,
                  typeid(::genfit::MaterialInfo), DefineBehavior(ptr, ptr),
                  &genfitcLcLMaterialInfo_ShowMembers, &genfitcLcLMaterialInfo_Dictionary, isa_proxy, 4,
                  sizeof(::genfit::MaterialInfo) );
      instance.SetNew(&new_genfitcLcLMaterialInfo);
      instance.SetNewArray(&newArray_genfitcLcLMaterialInfo);
      instance.SetDelete(&delete_genfitcLcLMaterialInfo);
      instance.SetDeleteArray(&deleteArray_genfitcLcLMaterialInfo);
      instance.SetDestructor(&destruct_genfitcLcLMaterialInfo);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::genfit::MaterialInfo*)
   {
      return GenerateInitInstanceLocal((::genfit::MaterialInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::MaterialInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void genfitcLcLMaterialInfo_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::genfit::MaterialInfo*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void genfitcLcLRectangularFinitePlane_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void genfitcLcLRectangularFinitePlane_Dictionary();
   static void *new_genfitcLcLRectangularFinitePlane(void *p = 0);
   static void *newArray_genfitcLcLRectangularFinitePlane(Long_t size, void *p);
   static void delete_genfitcLcLRectangularFinitePlane(void *p);
   static void deleteArray_genfitcLcLRectangularFinitePlane(void *p);
   static void destruct_genfitcLcLRectangularFinitePlane(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::RectangularFinitePlane*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::genfit::RectangularFinitePlane) == sizeof(::ROOT::Shadow::genfit::RectangularFinitePlane));
      ::genfit::RectangularFinitePlane *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genfit::RectangularFinitePlane),0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::RectangularFinitePlane", "./../include/RectangularFinitePlane.h", 9,
                  typeid(::genfit::RectangularFinitePlane), DefineBehavior(ptr, ptr),
                  &genfitcLcLRectangularFinitePlane_ShowMembers, &genfitcLcLRectangularFinitePlane_Dictionary, isa_proxy, 4,
                  sizeof(::genfit::RectangularFinitePlane) );
      instance.SetNew(&new_genfitcLcLRectangularFinitePlane);
      instance.SetNewArray(&newArray_genfitcLcLRectangularFinitePlane);
      instance.SetDelete(&delete_genfitcLcLRectangularFinitePlane);
      instance.SetDeleteArray(&deleteArray_genfitcLcLRectangularFinitePlane);
      instance.SetDestructor(&destruct_genfitcLcLRectangularFinitePlane);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::genfit::RectangularFinitePlane*)
   {
      return GenerateInitInstanceLocal((::genfit::RectangularFinitePlane*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::RectangularFinitePlane*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void genfitcLcLRectangularFinitePlane_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::genfit::RectangularFinitePlane*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void genfitcLcLTrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void genfitcLcLTrack_Dictionary();
   static void *new_genfitcLcLTrack(void *p = 0);
   static void *newArray_genfitcLcLTrack(Long_t size, void *p);
   static void delete_genfitcLcLTrack(void *p);
   static void deleteArray_genfitcLcLTrack(void *p);
   static void destruct_genfitcLcLTrack(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::Track*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::genfit::Track) == sizeof(::ROOT::Shadow::genfit::Track));
      ::genfit::Track *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genfit::Track),0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::Track", "./../include/Track.h", 19,
                  typeid(::genfit::Track), DefineBehavior(ptr, ptr),
                  &genfitcLcLTrack_ShowMembers, &genfitcLcLTrack_Dictionary, isa_proxy, 4,
                  sizeof(::genfit::Track) );
      instance.SetNew(&new_genfitcLcLTrack);
      instance.SetNewArray(&newArray_genfitcLcLTrack);
      instance.SetDelete(&delete_genfitcLcLTrack);
      instance.SetDeleteArray(&deleteArray_genfitcLcLTrack);
      instance.SetDestructor(&destruct_genfitcLcLTrack);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::genfit::Track*)
   {
      return GenerateInitInstanceLocal((::genfit::Track*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::Track*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void genfitcLcLTrack_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::genfit::Track*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void genfitcLcLPlanarMeasurement_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void genfitcLcLPlanarMeasurement_Dictionary();
   static void *new_genfitcLcLPlanarMeasurement(void *p = 0);
   static void *newArray_genfitcLcLPlanarMeasurement(Long_t size, void *p);
   static void delete_genfitcLcLPlanarMeasurement(void *p);
   static void deleteArray_genfitcLcLPlanarMeasurement(void *p);
   static void destruct_genfitcLcLPlanarMeasurement(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::PlanarMeasurement*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::genfit::PlanarMeasurement) == sizeof(::ROOT::Shadow::genfit::PlanarMeasurement));
      ::genfit::PlanarMeasurement *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genfit::PlanarMeasurement),0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::PlanarMeasurement", "./../include/PlanarMeasurement.h", 9,
                  typeid(::genfit::PlanarMeasurement), DefineBehavior(ptr, ptr),
                  &genfitcLcLPlanarMeasurement_ShowMembers, &genfitcLcLPlanarMeasurement_Dictionary, isa_proxy, 4,
                  sizeof(::genfit::PlanarMeasurement) );
      instance.SetNew(&new_genfitcLcLPlanarMeasurement);
      instance.SetNewArray(&newArray_genfitcLcLPlanarMeasurement);
      instance.SetDelete(&delete_genfitcLcLPlanarMeasurement);
      instance.SetDeleteArray(&deleteArray_genfitcLcLPlanarMeasurement);
      instance.SetDestructor(&destruct_genfitcLcLPlanarMeasurement);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::genfit::PlanarMeasurement*)
   {
      return GenerateInitInstanceLocal((::genfit::PlanarMeasurement*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::PlanarMeasurement*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void genfitcLcLPlanarMeasurement_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::genfit::PlanarMeasurement*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void genfitcLcLWireMeasurement_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void genfitcLcLWireMeasurement_Dictionary();
   static void *new_genfitcLcLWireMeasurement(void *p = 0);
   static void *newArray_genfitcLcLWireMeasurement(Long_t size, void *p);
   static void delete_genfitcLcLWireMeasurement(void *p);
   static void deleteArray_genfitcLcLWireMeasurement(void *p);
   static void destruct_genfitcLcLWireMeasurement(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::WireMeasurement*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::genfit::WireMeasurement) == sizeof(::ROOT::Shadow::genfit::WireMeasurement));
      ::genfit::WireMeasurement *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genfit::WireMeasurement),0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::WireMeasurement", "./../include/WireMeasurement.h", 9,
                  typeid(::genfit::WireMeasurement), DefineBehavior(ptr, ptr),
                  &genfitcLcLWireMeasurement_ShowMembers, &genfitcLcLWireMeasurement_Dictionary, isa_proxy, 4,
                  sizeof(::genfit::WireMeasurement) );
      instance.SetNew(&new_genfitcLcLWireMeasurement);
      instance.SetNewArray(&newArray_genfitcLcLWireMeasurement);
      instance.SetDelete(&delete_genfitcLcLWireMeasurement);
      instance.SetDeleteArray(&deleteArray_genfitcLcLWireMeasurement);
      instance.SetDestructor(&destruct_genfitcLcLWireMeasurement);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::genfit::WireMeasurement*)
   {
      return GenerateInitInstanceLocal((::genfit::WireMeasurement*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::WireMeasurement*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void genfitcLcLWireMeasurement_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::genfit::WireMeasurement*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void genfitcLcLPlanarPixelMeasurement_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void genfitcLcLPlanarPixelMeasurement_Dictionary();
   static void *new_genfitcLcLPlanarPixelMeasurement(void *p = 0);
   static void *newArray_genfitcLcLPlanarPixelMeasurement(Long_t size, void *p);
   static void delete_genfitcLcLPlanarPixelMeasurement(void *p);
   static void deleteArray_genfitcLcLPlanarPixelMeasurement(void *p);
   static void destruct_genfitcLcLPlanarPixelMeasurement(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::PlanarPixelMeasurement*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::genfit::PlanarPixelMeasurement) == sizeof(::ROOT::Shadow::genfit::PlanarPixelMeasurement));
      ::genfit::PlanarPixelMeasurement *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genfit::PlanarPixelMeasurement),0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::PlanarPixelMeasurement", "./../include/PlanarPixelMeasurement.h", 9,
                  typeid(::genfit::PlanarPixelMeasurement), DefineBehavior(ptr, ptr),
                  &genfitcLcLPlanarPixelMeasurement_ShowMembers, &genfitcLcLPlanarPixelMeasurement_Dictionary, isa_proxy, 4,
                  sizeof(::genfit::PlanarPixelMeasurement) );
      instance.SetNew(&new_genfitcLcLPlanarPixelMeasurement);
      instance.SetNewArray(&newArray_genfitcLcLPlanarPixelMeasurement);
      instance.SetDelete(&delete_genfitcLcLPlanarPixelMeasurement);
      instance.SetDeleteArray(&deleteArray_genfitcLcLPlanarPixelMeasurement);
      instance.SetDestructor(&destruct_genfitcLcLPlanarPixelMeasurement);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::genfit::PlanarPixelMeasurement*)
   {
      return GenerateInitInstanceLocal((::genfit::PlanarPixelMeasurement*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::PlanarPixelMeasurement*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void genfitcLcLPlanarPixelMeasurement_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::genfit::PlanarPixelMeasurement*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void genfitcLcLWirePointMeasurement_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void genfitcLcLWirePointMeasurement_Dictionary();
   static void *new_genfitcLcLWirePointMeasurement(void *p = 0);
   static void *newArray_genfitcLcLWirePointMeasurement(Long_t size, void *p);
   static void delete_genfitcLcLWirePointMeasurement(void *p);
   static void deleteArray_genfitcLcLWirePointMeasurement(void *p);
   static void destruct_genfitcLcLWirePointMeasurement(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::WirePointMeasurement*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::genfit::WirePointMeasurement) == sizeof(::ROOT::Shadow::genfit::WirePointMeasurement));
      ::genfit::WirePointMeasurement *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genfit::WirePointMeasurement),0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::WirePointMeasurement", "./../include/WirePointMeasurement.h", 9,
                  typeid(::genfit::WirePointMeasurement), DefineBehavior(ptr, ptr),
                  &genfitcLcLWirePointMeasurement_ShowMembers, &genfitcLcLWirePointMeasurement_Dictionary, isa_proxy, 4,
                  sizeof(::genfit::WirePointMeasurement) );
      instance.SetNew(&new_genfitcLcLWirePointMeasurement);
      instance.SetNewArray(&newArray_genfitcLcLWirePointMeasurement);
      instance.SetDelete(&delete_genfitcLcLWirePointMeasurement);
      instance.SetDeleteArray(&deleteArray_genfitcLcLWirePointMeasurement);
      instance.SetDestructor(&destruct_genfitcLcLWirePointMeasurement);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::genfit::WirePointMeasurement*)
   {
      return GenerateInitInstanceLocal((::genfit::WirePointMeasurement*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::WirePointMeasurement*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void genfitcLcLWirePointMeasurement_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::genfit::WirePointMeasurement*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void genfitcLcLPlanarStripMeasurement_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void genfitcLcLPlanarStripMeasurement_Dictionary();
   static void *new_genfitcLcLPlanarStripMeasurement(void *p = 0);
   static void *newArray_genfitcLcLPlanarStripMeasurement(Long_t size, void *p);
   static void delete_genfitcLcLPlanarStripMeasurement(void *p);
   static void deleteArray_genfitcLcLPlanarStripMeasurement(void *p);
   static void destruct_genfitcLcLPlanarStripMeasurement(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::PlanarStripMeasurement*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::genfit::PlanarStripMeasurement) == sizeof(::ROOT::Shadow::genfit::PlanarStripMeasurement));
      ::genfit::PlanarStripMeasurement *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genfit::PlanarStripMeasurement),0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::PlanarStripMeasurement", "./../include/PlanarStripMeasurement.h", 9,
                  typeid(::genfit::PlanarStripMeasurement), DefineBehavior(ptr, ptr),
                  &genfitcLcLPlanarStripMeasurement_ShowMembers, &genfitcLcLPlanarStripMeasurement_Dictionary, isa_proxy, 4,
                  sizeof(::genfit::PlanarStripMeasurement) );
      instance.SetNew(&new_genfitcLcLPlanarStripMeasurement);
      instance.SetNewArray(&newArray_genfitcLcLPlanarStripMeasurement);
      instance.SetDelete(&delete_genfitcLcLPlanarStripMeasurement);
      instance.SetDeleteArray(&deleteArray_genfitcLcLPlanarStripMeasurement);
      instance.SetDestructor(&destruct_genfitcLcLPlanarStripMeasurement);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::genfit::PlanarStripMeasurement*)
   {
      return GenerateInitInstanceLocal((::genfit::PlanarStripMeasurement*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::PlanarStripMeasurement*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void genfitcLcLPlanarStripMeasurement_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::genfit::PlanarStripMeasurement*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void genfitcLcLTrackCand_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void genfitcLcLTrackCand_Dictionary();
   static void *new_genfitcLcLTrackCand(void *p = 0);
   static void *newArray_genfitcLcLTrackCand(Long_t size, void *p);
   static void delete_genfitcLcLTrackCand(void *p);
   static void deleteArray_genfitcLcLTrackCand(void *p);
   static void destruct_genfitcLcLTrackCand(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::genfit::TrackCand*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::genfit::TrackCand) == sizeof(::ROOT::Shadow::genfit::TrackCand));
      ::genfit::TrackCand *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::genfit::TrackCand),0);
      static ::ROOT::TGenericClassInfo 
         instance("genfit::TrackCand", "./../include/TrackCand.h", 11,
                  typeid(::genfit::TrackCand), DefineBehavior(ptr, ptr),
                  &genfitcLcLTrackCand_ShowMembers, &genfitcLcLTrackCand_Dictionary, isa_proxy, 4,
                  sizeof(::genfit::TrackCand) );
      instance.SetNew(&new_genfitcLcLTrackCand);
      instance.SetNewArray(&newArray_genfitcLcLTrackCand);
      instance.SetDelete(&delete_genfitcLcLTrackCand);
      instance.SetDeleteArray(&deleteArray_genfitcLcLTrackCand);
      instance.SetDestructor(&destruct_genfitcLcLTrackCand);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::genfit::TrackCand*)
   {
      return GenerateInitInstanceLocal((::genfit::TrackCand*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::genfit::TrackCand*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void genfitcLcLTrackCand_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::genfit::TrackCand*)0x0)->GetClass();
   }

} // end of namespace ROOT

//______________________________________________________________________________
namespace ROOT {
   void genfitcLcLAbsFinitePlane_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class genfit::AbsFinitePlane.
      typedef ::ROOT::Shadow::genfit::AbsFinitePlane ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::genfit::AbsFinitePlane*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_genfitcLcLAbsFinitePlane(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::AbsFinitePlane : new ::genfit::AbsFinitePlane;
   }
   static void *newArray_genfitcLcLAbsFinitePlane(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::AbsFinitePlane[nElements] : new ::genfit::AbsFinitePlane[nElements];
   }
   // Wrapper around operator delete
   static void delete_genfitcLcLAbsFinitePlane(void *p) {
      delete ((::genfit::AbsFinitePlane*)p);
   }
   static void deleteArray_genfitcLcLAbsFinitePlane(void *p) {
      delete [] ((::genfit::AbsFinitePlane*)p);
   }
   static void destruct_genfitcLcLAbsFinitePlane(void *p) {
      typedef ::genfit::AbsFinitePlane current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::genfit::AbsFinitePlane

//______________________________________________________________________________
namespace ROOT {
   void genfitcLcLKalmanFitterInfo_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class genfit::KalmanFitterInfo.
      typedef ::ROOT::Shadow::genfit::KalmanFitterInfo ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::genfit::KalmanFitterInfo*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*referenceState_", &sobj->referenceState_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*forwardPrediction_", &sobj->forwardPrediction_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*forwardUpdate_", &sobj->forwardUpdate_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*backwardPrediction_", &sobj->backwardPrediction_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*backwardUpdate_", &sobj->backwardUpdate_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "measurementsOnPlane_", (void*)&sobj->measurementsOnPlane_);
      R__insp.InspectMember("vector<::MeasurementOnPlane>", (void*)&sobj->measurementsOnPlane_, "measurementsOnPlane_.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rep_", &sobj->rep_);
      R__insp.GenericShowMembers("genfit::AbsFitterInfo", ( ::genfit::AbsFitterInfo * )( (::genfit::KalmanFitterInfo*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_genfitcLcLKalmanFitterInfo(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::KalmanFitterInfo : new ::genfit::KalmanFitterInfo;
   }
   static void *newArray_genfitcLcLKalmanFitterInfo(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::KalmanFitterInfo[nElements] : new ::genfit::KalmanFitterInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_genfitcLcLKalmanFitterInfo(void *p) {
      delete ((::genfit::KalmanFitterInfo*)p);
   }
   static void deleteArray_genfitcLcLKalmanFitterInfo(void *p) {
      delete [] ((::genfit::KalmanFitterInfo*)p);
   }
   static void destruct_genfitcLcLKalmanFitterInfo(void *p) {
      typedef ::genfit::KalmanFitterInfo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::genfit::KalmanFitterInfo

//______________________________________________________________________________
namespace ROOT {
   void genfitcLcLProlateSpacePointMeasurement_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class genfit::ProlateSpacePointMeasurement.
      typedef ::ROOT::Shadow::genfit::ProlateSpacePointMeasurement ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::genfit::ProlateSpacePointMeasurement*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.GenericShowMembers("genfit::SpacePointMeasurement", ( ::genfit::SpacePointMeasurement * )( (::genfit::ProlateSpacePointMeasurement*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_genfitcLcLProlateSpacePointMeasurement(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::ProlateSpacePointMeasurement : new ::genfit::ProlateSpacePointMeasurement;
   }
   static void *newArray_genfitcLcLProlateSpacePointMeasurement(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::ProlateSpacePointMeasurement[nElements] : new ::genfit::ProlateSpacePointMeasurement[nElements];
   }
   // Wrapper around operator delete
   static void delete_genfitcLcLProlateSpacePointMeasurement(void *p) {
      delete ((::genfit::ProlateSpacePointMeasurement*)p);
   }
   static void deleteArray_genfitcLcLProlateSpacePointMeasurement(void *p) {
      delete [] ((::genfit::ProlateSpacePointMeasurement*)p);
   }
   static void destruct_genfitcLcLProlateSpacePointMeasurement(void *p) {
      typedef ::genfit::ProlateSpacePointMeasurement current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::genfit::ProlateSpacePointMeasurement

//______________________________________________________________________________
namespace ROOT {
   void genfitcLcLTrackCandHit_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class genfit::TrackCandHit.
      typedef ::ROOT::Shadow::genfit::TrackCandHit ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::genfit::TrackCandHit*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_genfitcLcLTrackCandHit(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::TrackCandHit : new ::genfit::TrackCandHit;
   }
   static void *newArray_genfitcLcLTrackCandHit(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::TrackCandHit[nElements] : new ::genfit::TrackCandHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_genfitcLcLTrackCandHit(void *p) {
      delete ((::genfit::TrackCandHit*)p);
   }
   static void deleteArray_genfitcLcLTrackCandHit(void *p) {
      delete [] ((::genfit::TrackCandHit*)p);
   }
   static void destruct_genfitcLcLTrackCandHit(void *p) {
      typedef ::genfit::TrackCandHit current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::genfit::TrackCandHit

//______________________________________________________________________________
namespace ROOT {
   void genfitcLcLAbsFitterInfo_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class genfit::AbsFitterInfo.
      typedef ::ROOT::Shadow::genfit::AbsFitterInfo ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::genfit::AbsFitterInfo*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_genfitcLcLAbsFitterInfo(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::AbsFitterInfo : new ::genfit::AbsFitterInfo;
   }
   static void *newArray_genfitcLcLAbsFitterInfo(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::AbsFitterInfo[nElements] : new ::genfit::AbsFitterInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_genfitcLcLAbsFitterInfo(void *p) {
      delete ((::genfit::AbsFitterInfo*)p);
   }
   static void deleteArray_genfitcLcLAbsFitterInfo(void *p) {
      delete [] ((::genfit::AbsFitterInfo*)p);
   }
   static void destruct_genfitcLcLAbsFitterInfo(void *p) {
      typedef ::genfit::AbsFitterInfo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::genfit::AbsFitterInfo

//______________________________________________________________________________
namespace ROOT {
   void genfitcLcLMaterialInfo_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class genfit::MaterialInfo.
      typedef ::ROOT::Shadow::genfit::MaterialInfo ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::genfit::MaterialInfo*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*sharedPlane_", &sobj->sharedPlane_);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_genfitcLcLMaterialInfo(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::MaterialInfo : new ::genfit::MaterialInfo;
   }
   static void *newArray_genfitcLcLMaterialInfo(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::MaterialInfo[nElements] : new ::genfit::MaterialInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_genfitcLcLMaterialInfo(void *p) {
      delete ((::genfit::MaterialInfo*)p);
   }
   static void deleteArray_genfitcLcLMaterialInfo(void *p) {
      delete [] ((::genfit::MaterialInfo*)p);
   }
   static void destruct_genfitcLcLMaterialInfo(void *p) {
      typedef ::genfit::MaterialInfo current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::genfit::MaterialInfo

//______________________________________________________________________________
namespace ROOT {
   void genfitcLcLRectangularFinitePlane_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class genfit::RectangularFinitePlane.
      typedef ::ROOT::Shadow::genfit::RectangularFinitePlane ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::genfit::RectangularFinitePlane*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.GenericShowMembers("genfit::AbsFinitePlane", ( ::genfit::AbsFinitePlane * )( (::genfit::RectangularFinitePlane*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_genfitcLcLRectangularFinitePlane(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::RectangularFinitePlane : new ::genfit::RectangularFinitePlane;
   }
   static void *newArray_genfitcLcLRectangularFinitePlane(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::RectangularFinitePlane[nElements] : new ::genfit::RectangularFinitePlane[nElements];
   }
   // Wrapper around operator delete
   static void delete_genfitcLcLRectangularFinitePlane(void *p) {
      delete ((::genfit::RectangularFinitePlane*)p);
   }
   static void deleteArray_genfitcLcLRectangularFinitePlane(void *p) {
      delete [] ((::genfit::RectangularFinitePlane*)p);
   }
   static void destruct_genfitcLcLRectangularFinitePlane(void *p) {
      typedef ::genfit::RectangularFinitePlane current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::genfit::RectangularFinitePlane

//______________________________________________________________________________
namespace ROOT {
   void genfitcLcLTrack_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class genfit::Track.
      typedef ::ROOT::Shadow::genfit::Track ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::genfit::Track*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackPoints_", (void*)&sobj->trackPoints_);
      R__insp.InspectMember("vector<TrackPoint>", (void*)&sobj->trackPoints_, "trackPoints_.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackReps_", (void*)&sobj->trackReps_);
      R__insp.InspectMember("vector<AbsTrackRep*>", (void*)&sobj->trackReps_, "trackReps_.", false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_genfitcLcLTrack(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::Track : new ::genfit::Track;
   }
   static void *newArray_genfitcLcLTrack(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::Track[nElements] : new ::genfit::Track[nElements];
   }
   // Wrapper around operator delete
   static void delete_genfitcLcLTrack(void *p) {
      delete ((::genfit::Track*)p);
   }
   static void deleteArray_genfitcLcLTrack(void *p) {
      delete [] ((::genfit::Track*)p);
   }
   static void destruct_genfitcLcLTrack(void *p) {
      typedef ::genfit::Track current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::genfit::Track

//______________________________________________________________________________
namespace ROOT {
   void genfitcLcLAbsMeasurement_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class genfit::AbsMeasurement.
      typedef ::ROOT::Shadow::genfit::AbsMeasurement ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::genfit::AbsMeasurement*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rawHitCoords_", &sobj->rawHitCoords_);
      R__insp.InspectMember(sobj->rawHitCoords_, "rawHitCoords_.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rawHitCov_", &sobj->rawHitCov_);
      R__insp.InspectMember(sobj->rawHitCov_, "rawHitCov_.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "detId_", &sobj->detId_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hitId_", &sobj->hitId_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rawMeasurements_", &sobj->rawMeasurements_);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_genfitcLcLAbsMeasurement(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::AbsMeasurement : new ::genfit::AbsMeasurement;
   }
   static void *newArray_genfitcLcLAbsMeasurement(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::AbsMeasurement[nElements] : new ::genfit::AbsMeasurement[nElements];
   }
   // Wrapper around operator delete
   static void delete_genfitcLcLAbsMeasurement(void *p) {
      delete ((::genfit::AbsMeasurement*)p);
   }
   static void deleteArray_genfitcLcLAbsMeasurement(void *p) {
      delete [] ((::genfit::AbsMeasurement*)p);
   }
   static void destruct_genfitcLcLAbsMeasurement(void *p) {
      typedef ::genfit::AbsMeasurement current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::genfit::AbsMeasurement

//______________________________________________________________________________
namespace ROOT {
   void genfitcLcLMeasuredStateOnPlane_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class genfit::MeasuredStateOnPlane.
      typedef ::ROOT::Shadow::genfit::MeasuredStateOnPlane ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::genfit::MeasuredStateOnPlane*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cov_", &sobj->cov_);
      R__insp.InspectMember(sobj->cov_, "cov_.");
      R__insp.GenericShowMembers("genfit::StateOnPlane", ( ::genfit::StateOnPlane * )( (::genfit::MeasuredStateOnPlane*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_genfitcLcLMeasuredStateOnPlane(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::MeasuredStateOnPlane : new ::genfit::MeasuredStateOnPlane;
   }
   static void *newArray_genfitcLcLMeasuredStateOnPlane(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::MeasuredStateOnPlane[nElements] : new ::genfit::MeasuredStateOnPlane[nElements];
   }
   // Wrapper around operator delete
   static void delete_genfitcLcLMeasuredStateOnPlane(void *p) {
      delete ((::genfit::MeasuredStateOnPlane*)p);
   }
   static void deleteArray_genfitcLcLMeasuredStateOnPlane(void *p) {
      delete [] ((::genfit::MeasuredStateOnPlane*)p);
   }
   static void destruct_genfitcLcLMeasuredStateOnPlane(void *p) {
      typedef ::genfit::MeasuredStateOnPlane current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::genfit::MeasuredStateOnPlane

//______________________________________________________________________________
namespace ROOT {
   void genfitcLcLReferenceStateOnPlane_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class genfit::ReferenceStateOnPlane.
      typedef ::ROOT::Shadow::genfit::ReferenceStateOnPlane ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::genfit::ReferenceStateOnPlane*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "forwardSegmentLength_", &sobj->forwardSegmentLength_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "backwardSegmentLength_", &sobj->backwardSegmentLength_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "forwardTransportMatrix", &sobj->forwardTransportMatrix);
      R__insp.InspectMember(sobj->forwardTransportMatrix, "forwardTransportMatrix.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "backwardTransportMatrix", &sobj->backwardTransportMatrix);
      R__insp.InspectMember(sobj->backwardTransportMatrix, "backwardTransportMatrix.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "forwardNoiseMatrix", &sobj->forwardNoiseMatrix);
      R__insp.InspectMember(sobj->forwardNoiseMatrix, "forwardNoiseMatrix.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "backwardNoiseMatrix", &sobj->backwardNoiseMatrix);
      R__insp.InspectMember(sobj->backwardNoiseMatrix, "backwardNoiseMatrix.");
      R__insp.GenericShowMembers("genfit::StateOnPlane", ( ::genfit::StateOnPlane * )( (::genfit::ReferenceStateOnPlane*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_genfitcLcLReferenceStateOnPlane(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::ReferenceStateOnPlane : new ::genfit::ReferenceStateOnPlane;
   }
   static void *newArray_genfitcLcLReferenceStateOnPlane(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::ReferenceStateOnPlane[nElements] : new ::genfit::ReferenceStateOnPlane[nElements];
   }
   // Wrapper around operator delete
   static void delete_genfitcLcLReferenceStateOnPlane(void *p) {
      delete ((::genfit::ReferenceStateOnPlane*)p);
   }
   static void deleteArray_genfitcLcLReferenceStateOnPlane(void *p) {
      delete [] ((::genfit::ReferenceStateOnPlane*)p);
   }
   static void destruct_genfitcLcLReferenceStateOnPlane(void *p) {
      typedef ::genfit::ReferenceStateOnPlane current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::genfit::ReferenceStateOnPlane

//______________________________________________________________________________
namespace ROOT {
   void genfitcLcLTrackPoint_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class genfit::TrackPoint.
      typedef ::ROOT::Shadow::genfit::TrackPoint ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::genfit::TrackPoint*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sortingParameter_", &sobj->sortingParameter_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*trackPoints_", &sobj->trackPoints_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rawMeasurements_", (void*)&sobj->rawMeasurements_);
      R__insp.InspectMember("vector<AbsMeasurement*>", (void*)&sobj->rawMeasurements_, "rawMeasurements_.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitterInfos_", (void*)&sobj->fitterInfos_);
      R__insp.InspectMember("vector<KalmanFitterInfo>", (void*)&sobj->fitterInfos_, "fitterInfos_.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*material_", &sobj->material_);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_genfitcLcLTrackPoint(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::TrackPoint : new ::genfit::TrackPoint;
   }
   static void *newArray_genfitcLcLTrackPoint(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::TrackPoint[nElements] : new ::genfit::TrackPoint[nElements];
   }
   // Wrapper around operator delete
   static void delete_genfitcLcLTrackPoint(void *p) {
      delete ((::genfit::TrackPoint*)p);
   }
   static void deleteArray_genfitcLcLTrackPoint(void *p) {
      delete [] ((::genfit::TrackPoint*)p);
   }
   static void destruct_genfitcLcLTrackPoint(void *p) {
      typedef ::genfit::TrackPoint current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::genfit::TrackPoint

//______________________________________________________________________________
namespace ROOT {
   void genfitcLcLAbsTrackRep_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class genfit::AbsTrackRep.
      typedef ::ROOT::Shadow::genfit::AbsTrackRep ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::genfit::AbsTrackRep*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pdgCode_", &sobj->pdgCode_);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_genfitcLcLAbsTrackRep(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::AbsTrackRep : new ::genfit::AbsTrackRep;
   }
   static void *newArray_genfitcLcLAbsTrackRep(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::AbsTrackRep[nElements] : new ::genfit::AbsTrackRep[nElements];
   }
   // Wrapper around operator delete
   static void delete_genfitcLcLAbsTrackRep(void *p) {
      delete ((::genfit::AbsTrackRep*)p);
   }
   static void deleteArray_genfitcLcLAbsTrackRep(void *p) {
      delete [] ((::genfit::AbsTrackRep*)p);
   }
   static void destruct_genfitcLcLAbsTrackRep(void *p) {
      typedef ::genfit::AbsTrackRep current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::genfit::AbsTrackRep

//______________________________________________________________________________
namespace ROOT {
   void genfitcLcLPlanarMeasurement_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class genfit::PlanarMeasurement.
      typedef ::ROOT::Shadow::genfit::PlanarMeasurement ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::genfit::PlanarMeasurement*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "planeId_", &sobj->planeId_);
      R__insp.GenericShowMembers("genfit::AbsMeasurement", ( ::genfit::AbsMeasurement * )( (::genfit::PlanarMeasurement*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_genfitcLcLPlanarMeasurement(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::PlanarMeasurement : new ::genfit::PlanarMeasurement;
   }
   static void *newArray_genfitcLcLPlanarMeasurement(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::PlanarMeasurement[nElements] : new ::genfit::PlanarMeasurement[nElements];
   }
   // Wrapper around operator delete
   static void delete_genfitcLcLPlanarMeasurement(void *p) {
      delete ((::genfit::PlanarMeasurement*)p);
   }
   static void deleteArray_genfitcLcLPlanarMeasurement(void *p) {
      delete [] ((::genfit::PlanarMeasurement*)p);
   }
   static void destruct_genfitcLcLPlanarMeasurement(void *p) {
      typedef ::genfit::PlanarMeasurement current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::genfit::PlanarMeasurement

//______________________________________________________________________________
namespace ROOT {
   void genfitcLcLSpacePointMeasurement_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class genfit::SpacePointMeasurement.
      typedef ::ROOT::Shadow::genfit::SpacePointMeasurement ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::genfit::SpacePointMeasurement*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.GenericShowMembers("genfit::AbsMeasurement", ( ::genfit::AbsMeasurement * )( (::genfit::SpacePointMeasurement*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_genfitcLcLSpacePointMeasurement(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::SpacePointMeasurement : new ::genfit::SpacePointMeasurement;
   }
   static void *newArray_genfitcLcLSpacePointMeasurement(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::SpacePointMeasurement[nElements] : new ::genfit::SpacePointMeasurement[nElements];
   }
   // Wrapper around operator delete
   static void delete_genfitcLcLSpacePointMeasurement(void *p) {
      delete ((::genfit::SpacePointMeasurement*)p);
   }
   static void deleteArray_genfitcLcLSpacePointMeasurement(void *p) {
      delete [] ((::genfit::SpacePointMeasurement*)p);
   }
   static void destruct_genfitcLcLSpacePointMeasurement(void *p) {
      typedef ::genfit::SpacePointMeasurement current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::genfit::SpacePointMeasurement

//______________________________________________________________________________
namespace ROOT {
   void genfitcLcLWireMeasurement_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class genfit::WireMeasurement.
      typedef ::ROOT::Shadow::genfit::WireMeasurement ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::genfit::WireMeasurement*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leftRight_", &sobj->leftRight_);
      R__insp.GenericShowMembers("genfit::AbsMeasurement", ( ::genfit::AbsMeasurement * )( (::genfit::WireMeasurement*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_genfitcLcLWireMeasurement(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::WireMeasurement : new ::genfit::WireMeasurement;
   }
   static void *newArray_genfitcLcLWireMeasurement(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::WireMeasurement[nElements] : new ::genfit::WireMeasurement[nElements];
   }
   // Wrapper around operator delete
   static void delete_genfitcLcLWireMeasurement(void *p) {
      delete ((::genfit::WireMeasurement*)p);
   }
   static void deleteArray_genfitcLcLWireMeasurement(void *p) {
      delete [] ((::genfit::WireMeasurement*)p);
   }
   static void destruct_genfitcLcLWireMeasurement(void *p) {
      typedef ::genfit::WireMeasurement current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::genfit::WireMeasurement

//______________________________________________________________________________
namespace ROOT {
   void genfitcLcLDetPlane_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class genfit::DetPlane.
      typedef ::ROOT::Shadow::genfit::DetPlane ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::genfit::DetPlane*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "o_", &sobj->o_);
      R__insp.InspectMember(sobj->o_, "o_.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "u_", &sobj->u_);
      R__insp.InspectMember(sobj->u_, "u_.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "v_", &sobj->v_);
      R__insp.InspectMember(sobj->v_, "v_.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*finitePlane_", &sobj->finitePlane_);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_genfitcLcLDetPlane(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::DetPlane : new ::genfit::DetPlane;
   }
   static void *newArray_genfitcLcLDetPlane(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::DetPlane[nElements] : new ::genfit::DetPlane[nElements];
   }
   // Wrapper around operator delete
   static void delete_genfitcLcLDetPlane(void *p) {
      delete ((::genfit::DetPlane*)p);
   }
   static void deleteArray_genfitcLcLDetPlane(void *p) {
      delete [] ((::genfit::DetPlane*)p);
   }
   static void destruct_genfitcLcLDetPlane(void *p) {
      typedef ::genfit::DetPlane current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::genfit::DetPlane

//______________________________________________________________________________
namespace ROOT {
   void genfitcLcLPlanarPixelMeasurement_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class genfit::PlanarPixelMeasurement.
      typedef ::ROOT::Shadow::genfit::PlanarPixelMeasurement ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::genfit::PlanarPixelMeasurement*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.GenericShowMembers("genfit::PlanarMeasurement", ( ::genfit::PlanarMeasurement * )( (::genfit::PlanarPixelMeasurement*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_genfitcLcLPlanarPixelMeasurement(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::PlanarPixelMeasurement : new ::genfit::PlanarPixelMeasurement;
   }
   static void *newArray_genfitcLcLPlanarPixelMeasurement(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::PlanarPixelMeasurement[nElements] : new ::genfit::PlanarPixelMeasurement[nElements];
   }
   // Wrapper around operator delete
   static void delete_genfitcLcLPlanarPixelMeasurement(void *p) {
      delete ((::genfit::PlanarPixelMeasurement*)p);
   }
   static void deleteArray_genfitcLcLPlanarPixelMeasurement(void *p) {
      delete [] ((::genfit::PlanarPixelMeasurement*)p);
   }
   static void destruct_genfitcLcLPlanarPixelMeasurement(void *p) {
      typedef ::genfit::PlanarPixelMeasurement current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::genfit::PlanarPixelMeasurement

//______________________________________________________________________________
namespace ROOT {
   void genfitcLcLStateOnPlane_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class genfit::StateOnPlane.
      typedef ::ROOT::Shadow::genfit::StateOnPlane ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::genfit::StateOnPlane*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "state_", &sobj->state_);
      R__insp.InspectMember(sobj->state_, "state_.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*sharedPlane_", &sobj->sharedPlane_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rep_", &sobj->rep_);
   }

}

namespace ROOT {
   // Wrapper around operator delete
   static void delete_genfitcLcLStateOnPlane(void *p) {
      delete ((::genfit::StateOnPlane*)p);
   }
   static void deleteArray_genfitcLcLStateOnPlane(void *p) {
      delete [] ((::genfit::StateOnPlane*)p);
   }
   static void destruct_genfitcLcLStateOnPlane(void *p) {
      typedef ::genfit::StateOnPlane current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::genfit::StateOnPlane

//______________________________________________________________________________
namespace ROOT {
   void genfitcLcLWirePointMeasurement_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class genfit::WirePointMeasurement.
      typedef ::ROOT::Shadow::genfit::WirePointMeasurement ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::genfit::WirePointMeasurement*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.GenericShowMembers("genfit::WireMeasurement", ( ::genfit::WireMeasurement * )( (::genfit::WirePointMeasurement*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_genfitcLcLWirePointMeasurement(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::WirePointMeasurement : new ::genfit::WirePointMeasurement;
   }
   static void *newArray_genfitcLcLWirePointMeasurement(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::WirePointMeasurement[nElements] : new ::genfit::WirePointMeasurement[nElements];
   }
   // Wrapper around operator delete
   static void delete_genfitcLcLWirePointMeasurement(void *p) {
      delete ((::genfit::WirePointMeasurement*)p);
   }
   static void deleteArray_genfitcLcLWirePointMeasurement(void *p) {
      delete [] ((::genfit::WirePointMeasurement*)p);
   }
   static void destruct_genfitcLcLWirePointMeasurement(void *p) {
      typedef ::genfit::WirePointMeasurement current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::genfit::WirePointMeasurement

//______________________________________________________________________________
namespace ROOT {
   void genfitcLcLKalmanFittedStateOnPlane_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class genfit::KalmanFittedStateOnPlane.
      typedef ::ROOT::Shadow::genfit::KalmanFittedStateOnPlane ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::genfit::KalmanFittedStateOnPlane*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chiSquareIncrement_", &sobj->chiSquareIncrement_);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ndf_", &sobj->ndf_);
      R__insp.GenericShowMembers("genfit::MeasuredStateOnPlane", ( ::genfit::MeasuredStateOnPlane * )( (::genfit::KalmanFittedStateOnPlane*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_genfitcLcLKalmanFittedStateOnPlane(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::KalmanFittedStateOnPlane : new ::genfit::KalmanFittedStateOnPlane;
   }
   static void *newArray_genfitcLcLKalmanFittedStateOnPlane(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::KalmanFittedStateOnPlane[nElements] : new ::genfit::KalmanFittedStateOnPlane[nElements];
   }
   // Wrapper around operator delete
   static void delete_genfitcLcLKalmanFittedStateOnPlane(void *p) {
      delete ((::genfit::KalmanFittedStateOnPlane*)p);
   }
   static void deleteArray_genfitcLcLKalmanFittedStateOnPlane(void *p) {
      delete [] ((::genfit::KalmanFittedStateOnPlane*)p);
   }
   static void destruct_genfitcLcLKalmanFittedStateOnPlane(void *p) {
      typedef ::genfit::KalmanFittedStateOnPlane current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::genfit::KalmanFittedStateOnPlane

//______________________________________________________________________________
namespace ROOT {
   void genfitcLcLPlanarStripMeasurement_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class genfit::PlanarStripMeasurement.
      typedef ::ROOT::Shadow::genfit::PlanarStripMeasurement ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::genfit::PlanarStripMeasurement*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.GenericShowMembers("genfit::PlanarMeasurement", ( ::genfit::PlanarMeasurement * )( (::genfit::PlanarStripMeasurement*) obj ), false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_genfitcLcLPlanarStripMeasurement(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::PlanarStripMeasurement : new ::genfit::PlanarStripMeasurement;
   }
   static void *newArray_genfitcLcLPlanarStripMeasurement(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::PlanarStripMeasurement[nElements] : new ::genfit::PlanarStripMeasurement[nElements];
   }
   // Wrapper around operator delete
   static void delete_genfitcLcLPlanarStripMeasurement(void *p) {
      delete ((::genfit::PlanarStripMeasurement*)p);
   }
   static void deleteArray_genfitcLcLPlanarStripMeasurement(void *p) {
      delete [] ((::genfit::PlanarStripMeasurement*)p);
   }
   static void destruct_genfitcLcLPlanarStripMeasurement(void *p) {
      typedef ::genfit::PlanarStripMeasurement current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::genfit::PlanarStripMeasurement

//______________________________________________________________________________
namespace ROOT {
   void genfitcLcLTrackCand_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class genfit::TrackCand.
      typedef ::ROOT::Shadow::genfit::TrackCand ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::genfit::TrackCand*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "myTrackCandHit", (void*)&sobj->myTrackCandHit);
      R__insp.InspectMember("vector<TrackCandHit>", (void*)&sobj->myTrackCandHit, "myTrackCandHit.", false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_genfitcLcLTrackCand(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::TrackCand : new ::genfit::TrackCand;
   }
   static void *newArray_genfitcLcLTrackCand(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::genfit::TrackCand[nElements] : new ::genfit::TrackCand[nElements];
   }
   // Wrapper around operator delete
   static void delete_genfitcLcLTrackCand(void *p) {
      delete ((::genfit::TrackCand*)p);
   }
   static void deleteArray_genfitcLcLTrackCand(void *p) {
      delete [] ((::genfit::TrackCand*)p);
   }
   static void destruct_genfitcLcLTrackCand(void *p) {
      typedef ::genfit::TrackCand current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::genfit::TrackCand

namespace ROOT {
   void vectorlEMeasurementOnPlanegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEMeasurementOnPlanegR_Dictionary();
   static void *new_vectorlEMeasurementOnPlanegR(void *p = 0);
   static void *newArray_vectorlEMeasurementOnPlanegR(Long_t size, void *p);
   static void delete_vectorlEMeasurementOnPlanegR(void *p);
   static void deleteArray_vectorlEMeasurementOnPlanegR(void *p);
   static void destruct_vectorlEMeasurementOnPlanegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<MeasurementOnPlane>*)
   {
      vector<MeasurementOnPlane> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<MeasurementOnPlane>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<MeasurementOnPlane>", -2, "/nfs/hicran/project/belle/basf2/externals/v00-03-03/build/root/Linux_i686/debug/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<MeasurementOnPlane>), DefineBehavior(ptr, ptr),
                  0, &vectorlEMeasurementOnPlanegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<MeasurementOnPlane>) );
      instance.SetNew(&new_vectorlEMeasurementOnPlanegR);
      instance.SetNewArray(&newArray_vectorlEMeasurementOnPlanegR);
      instance.SetDelete(&delete_vectorlEMeasurementOnPlanegR);
      instance.SetDeleteArray(&deleteArray_vectorlEMeasurementOnPlanegR);
      instance.SetDestructor(&destruct_vectorlEMeasurementOnPlanegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<MeasurementOnPlane> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<MeasurementOnPlane>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEMeasurementOnPlanegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<MeasurementOnPlane>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEMeasurementOnPlanegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MeasurementOnPlane> : new vector<MeasurementOnPlane>;
   }
   static void *newArray_vectorlEMeasurementOnPlanegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<MeasurementOnPlane>[nElements] : new vector<MeasurementOnPlane>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEMeasurementOnPlanegR(void *p) {
      delete ((vector<MeasurementOnPlane>*)p);
   }
   static void deleteArray_vectorlEMeasurementOnPlanegR(void *p) {
      delete [] ((vector<MeasurementOnPlane>*)p);
   }
   static void destruct_vectorlEMeasurementOnPlanegR(void *p) {
      typedef vector<MeasurementOnPlane> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<MeasurementOnPlane>

namespace ROOT {
   void vectorlEgenfitcLcLAbsMeasurementmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEgenfitcLcLAbsMeasurementmUgR_Dictionary();
   static void *new_vectorlEgenfitcLcLAbsMeasurementmUgR(void *p = 0);
   static void *newArray_vectorlEgenfitcLcLAbsMeasurementmUgR(Long_t size, void *p);
   static void delete_vectorlEgenfitcLcLAbsMeasurementmUgR(void *p);
   static void deleteArray_vectorlEgenfitcLcLAbsMeasurementmUgR(void *p);
   static void destruct_vectorlEgenfitcLcLAbsMeasurementmUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<genfit::AbsMeasurement*>*)
   {
      vector<genfit::AbsMeasurement*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<genfit::AbsMeasurement*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<genfit::AbsMeasurement*>", -2, "/nfs/hicran/project/belle/basf2/externals/v00-03-03/build/root/Linux_i686/debug/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<genfit::AbsMeasurement*>), DefineBehavior(ptr, ptr),
                  0, &vectorlEgenfitcLcLAbsMeasurementmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<genfit::AbsMeasurement*>) );
      instance.SetNew(&new_vectorlEgenfitcLcLAbsMeasurementmUgR);
      instance.SetNewArray(&newArray_vectorlEgenfitcLcLAbsMeasurementmUgR);
      instance.SetDelete(&delete_vectorlEgenfitcLcLAbsMeasurementmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEgenfitcLcLAbsMeasurementmUgR);
      instance.SetDestructor(&destruct_vectorlEgenfitcLcLAbsMeasurementmUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<genfit::AbsMeasurement*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<genfit::AbsMeasurement*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEgenfitcLcLAbsMeasurementmUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<genfit::AbsMeasurement*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEgenfitcLcLAbsMeasurementmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<genfit::AbsMeasurement*> : new vector<genfit::AbsMeasurement*>;
   }
   static void *newArray_vectorlEgenfitcLcLAbsMeasurementmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<genfit::AbsMeasurement*>[nElements] : new vector<genfit::AbsMeasurement*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEgenfitcLcLAbsMeasurementmUgR(void *p) {
      delete ((vector<genfit::AbsMeasurement*>*)p);
   }
   static void deleteArray_vectorlEgenfitcLcLAbsMeasurementmUgR(void *p) {
      delete [] ((vector<genfit::AbsMeasurement*>*)p);
   }
   static void destruct_vectorlEgenfitcLcLAbsMeasurementmUgR(void *p) {
      typedef vector<genfit::AbsMeasurement*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<genfit::AbsMeasurement*>

namespace ROOT {
   void vectorlEgenfitcLcLAbsTrackRepmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEgenfitcLcLAbsTrackRepmUgR_Dictionary();
   static void *new_vectorlEgenfitcLcLAbsTrackRepmUgR(void *p = 0);
   static void *newArray_vectorlEgenfitcLcLAbsTrackRepmUgR(Long_t size, void *p);
   static void delete_vectorlEgenfitcLcLAbsTrackRepmUgR(void *p);
   static void deleteArray_vectorlEgenfitcLcLAbsTrackRepmUgR(void *p);
   static void destruct_vectorlEgenfitcLcLAbsTrackRepmUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<genfit::AbsTrackRep*>*)
   {
      vector<genfit::AbsTrackRep*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<genfit::AbsTrackRep*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<genfit::AbsTrackRep*>", -2, "/nfs/hicran/project/belle/basf2/externals/v00-03-03/build/root/Linux_i686/debug/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<genfit::AbsTrackRep*>), DefineBehavior(ptr, ptr),
                  0, &vectorlEgenfitcLcLAbsTrackRepmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<genfit::AbsTrackRep*>) );
      instance.SetNew(&new_vectorlEgenfitcLcLAbsTrackRepmUgR);
      instance.SetNewArray(&newArray_vectorlEgenfitcLcLAbsTrackRepmUgR);
      instance.SetDelete(&delete_vectorlEgenfitcLcLAbsTrackRepmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEgenfitcLcLAbsTrackRepmUgR);
      instance.SetDestructor(&destruct_vectorlEgenfitcLcLAbsTrackRepmUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<genfit::AbsTrackRep*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<genfit::AbsTrackRep*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEgenfitcLcLAbsTrackRepmUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<genfit::AbsTrackRep*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEgenfitcLcLAbsTrackRepmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<genfit::AbsTrackRep*> : new vector<genfit::AbsTrackRep*>;
   }
   static void *newArray_vectorlEgenfitcLcLAbsTrackRepmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<genfit::AbsTrackRep*>[nElements] : new vector<genfit::AbsTrackRep*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEgenfitcLcLAbsTrackRepmUgR(void *p) {
      delete ((vector<genfit::AbsTrackRep*>*)p);
   }
   static void deleteArray_vectorlEgenfitcLcLAbsTrackRepmUgR(void *p) {
      delete [] ((vector<genfit::AbsTrackRep*>*)p);
   }
   static void destruct_vectorlEgenfitcLcLAbsTrackRepmUgR(void *p) {
      typedef vector<genfit::AbsTrackRep*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<genfit::AbsTrackRep*>

namespace ROOT {
   void vectorlEgenfitcLcLKalmanFitterInfogR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEgenfitcLcLKalmanFitterInfogR_Dictionary();
   static void *new_vectorlEgenfitcLcLKalmanFitterInfogR(void *p = 0);
   static void *newArray_vectorlEgenfitcLcLKalmanFitterInfogR(Long_t size, void *p);
   static void delete_vectorlEgenfitcLcLKalmanFitterInfogR(void *p);
   static void deleteArray_vectorlEgenfitcLcLKalmanFitterInfogR(void *p);
   static void destruct_vectorlEgenfitcLcLKalmanFitterInfogR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<genfit::KalmanFitterInfo>*)
   {
      vector<genfit::KalmanFitterInfo> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<genfit::KalmanFitterInfo>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<genfit::KalmanFitterInfo>", -2, "/nfs/hicran/project/belle/basf2/externals/v00-03-03/build/root/Linux_i686/debug/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<genfit::KalmanFitterInfo>), DefineBehavior(ptr, ptr),
                  0, &vectorlEgenfitcLcLKalmanFitterInfogR_Dictionary, isa_proxy, 0,
                  sizeof(vector<genfit::KalmanFitterInfo>) );
      instance.SetNew(&new_vectorlEgenfitcLcLKalmanFitterInfogR);
      instance.SetNewArray(&newArray_vectorlEgenfitcLcLKalmanFitterInfogR);
      instance.SetDelete(&delete_vectorlEgenfitcLcLKalmanFitterInfogR);
      instance.SetDeleteArray(&deleteArray_vectorlEgenfitcLcLKalmanFitterInfogR);
      instance.SetDestructor(&destruct_vectorlEgenfitcLcLKalmanFitterInfogR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<genfit::KalmanFitterInfo> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<genfit::KalmanFitterInfo>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEgenfitcLcLKalmanFitterInfogR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<genfit::KalmanFitterInfo>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEgenfitcLcLKalmanFitterInfogR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<genfit::KalmanFitterInfo> : new vector<genfit::KalmanFitterInfo>;
   }
   static void *newArray_vectorlEgenfitcLcLKalmanFitterInfogR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<genfit::KalmanFitterInfo>[nElements] : new vector<genfit::KalmanFitterInfo>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEgenfitcLcLKalmanFitterInfogR(void *p) {
      delete ((vector<genfit::KalmanFitterInfo>*)p);
   }
   static void deleteArray_vectorlEgenfitcLcLKalmanFitterInfogR(void *p) {
      delete [] ((vector<genfit::KalmanFitterInfo>*)p);
   }
   static void destruct_vectorlEgenfitcLcLKalmanFitterInfogR(void *p) {
      typedef vector<genfit::KalmanFitterInfo> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<genfit::KalmanFitterInfo>

namespace ROOT {
   void vectorlEgenfitcLcLTrackCandHitgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEgenfitcLcLTrackCandHitgR_Dictionary();
   static void *new_vectorlEgenfitcLcLTrackCandHitgR(void *p = 0);
   static void *newArray_vectorlEgenfitcLcLTrackCandHitgR(Long_t size, void *p);
   static void delete_vectorlEgenfitcLcLTrackCandHitgR(void *p);
   static void deleteArray_vectorlEgenfitcLcLTrackCandHitgR(void *p);
   static void destruct_vectorlEgenfitcLcLTrackCandHitgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<genfit::TrackCandHit>*)
   {
      vector<genfit::TrackCandHit> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<genfit::TrackCandHit>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<genfit::TrackCandHit>", -2, "/nfs/hicran/project/belle/basf2/externals/v00-03-03/build/root/Linux_i686/debug/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<genfit::TrackCandHit>), DefineBehavior(ptr, ptr),
                  0, &vectorlEgenfitcLcLTrackCandHitgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<genfit::TrackCandHit>) );
      instance.SetNew(&new_vectorlEgenfitcLcLTrackCandHitgR);
      instance.SetNewArray(&newArray_vectorlEgenfitcLcLTrackCandHitgR);
      instance.SetDelete(&delete_vectorlEgenfitcLcLTrackCandHitgR);
      instance.SetDeleteArray(&deleteArray_vectorlEgenfitcLcLTrackCandHitgR);
      instance.SetDestructor(&destruct_vectorlEgenfitcLcLTrackCandHitgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<genfit::TrackCandHit> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<genfit::TrackCandHit>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEgenfitcLcLTrackCandHitgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<genfit::TrackCandHit>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEgenfitcLcLTrackCandHitgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<genfit::TrackCandHit> : new vector<genfit::TrackCandHit>;
   }
   static void *newArray_vectorlEgenfitcLcLTrackCandHitgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<genfit::TrackCandHit>[nElements] : new vector<genfit::TrackCandHit>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEgenfitcLcLTrackCandHitgR(void *p) {
      delete ((vector<genfit::TrackCandHit>*)p);
   }
   static void deleteArray_vectorlEgenfitcLcLTrackCandHitgR(void *p) {
      delete [] ((vector<genfit::TrackCandHit>*)p);
   }
   static void destruct_vectorlEgenfitcLcLTrackCandHitgR(void *p) {
      typedef vector<genfit::TrackCandHit> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<genfit::TrackCandHit>

namespace ROOT {
   void vectorlEgenfitcLcLTrackPointgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEgenfitcLcLTrackPointgR_Dictionary();
   static void *new_vectorlEgenfitcLcLTrackPointgR(void *p = 0);
   static void *newArray_vectorlEgenfitcLcLTrackPointgR(Long_t size, void *p);
   static void delete_vectorlEgenfitcLcLTrackPointgR(void *p);
   static void deleteArray_vectorlEgenfitcLcLTrackPointgR(void *p);
   static void destruct_vectorlEgenfitcLcLTrackPointgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<genfit::TrackPoint>*)
   {
      vector<genfit::TrackPoint> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<genfit::TrackPoint>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<genfit::TrackPoint>", -2, "/nfs/hicran/project/belle/basf2/externals/v00-03-03/build/root/Linux_i686/debug/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<genfit::TrackPoint>), DefineBehavior(ptr, ptr),
                  0, &vectorlEgenfitcLcLTrackPointgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<genfit::TrackPoint>) );
      instance.SetNew(&new_vectorlEgenfitcLcLTrackPointgR);
      instance.SetNewArray(&newArray_vectorlEgenfitcLcLTrackPointgR);
      instance.SetDelete(&delete_vectorlEgenfitcLcLTrackPointgR);
      instance.SetDeleteArray(&deleteArray_vectorlEgenfitcLcLTrackPointgR);
      instance.SetDestructor(&destruct_vectorlEgenfitcLcLTrackPointgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<genfit::TrackPoint> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<genfit::TrackPoint>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEgenfitcLcLTrackPointgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<genfit::TrackPoint>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEgenfitcLcLTrackPointgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<genfit::TrackPoint> : new vector<genfit::TrackPoint>;
   }
   static void *newArray_vectorlEgenfitcLcLTrackPointgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<genfit::TrackPoint>[nElements] : new vector<genfit::TrackPoint>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEgenfitcLcLTrackPointgR(void *p) {
      delete ((vector<genfit::TrackPoint>*)p);
   }
   static void deleteArray_vectorlEgenfitcLcLTrackPointgR(void *p) {
      delete [] ((vector<genfit::TrackPoint>*)p);
   }
   static void destruct_vectorlEgenfitcLcLTrackPointgR(void *p) {
      typedef vector<genfit::TrackPoint> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<genfit::TrackPoint>

/********************************************************
* /nfs/hicran/project/panda/SIM/jrauch/genfitStandalone/branches/genfit2/UML/CodeGeneratorOutput/genfitDict.cpp
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtablegenfitDict();

extern "C" void G__set_cpp_environmentgenfitDict() {
  G__cpp_reset_tagtablegenfitDict();
}
#include <new>
extern "C" int G__cpp_dllrevgenfitDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* genfit::AbsFinitePlane */
static int G__genfitDict_169_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((genfit::AbsFinitePlane*) G__getstructoffset())->isInActive((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__genfitDict_169_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::AbsFinitePlane *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::AbsFinitePlane[n];
     } else {
       p = new((void*) gvp) genfit::AbsFinitePlane[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::AbsFinitePlane;
     } else {
       p = new((void*) gvp) genfit::AbsFinitePlane;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsFinitePlane));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__genfitDict_169_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genfit::AbsFinitePlane* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genfit::AbsFinitePlane(*(genfit::AbsFinitePlane*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsFinitePlane));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::AbsFinitePlane G__TgenfitcLcLAbsFinitePlane;
static int G__genfitDict_169_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::AbsFinitePlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::AbsFinitePlane*) (soff+(sizeof(genfit::AbsFinitePlane)*i)))->~G__TgenfitcLcLAbsFinitePlane();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::AbsFinitePlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::AbsFinitePlane*) (soff))->~G__TgenfitcLcLAbsFinitePlane();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__genfitDict_169_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::AbsFinitePlane* dest = (genfit::AbsFinitePlane*) G__getstructoffset();
   *dest = *(genfit::AbsFinitePlane*) libp->para[0].ref;
   const genfit::AbsFinitePlane& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::AbsFitterInfo */
// automatic default constructor
static int G__genfitDict_170_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::AbsFitterInfo *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::AbsFitterInfo[n];
     } else {
       p = new((void*) gvp) genfit::AbsFitterInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::AbsFitterInfo;
     } else {
       p = new((void*) gvp) genfit::AbsFitterInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsFitterInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__genfitDict_170_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genfit::AbsFitterInfo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genfit::AbsFitterInfo(*(genfit::AbsFitterInfo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsFitterInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::AbsFitterInfo G__TgenfitcLcLAbsFitterInfo;
static int G__genfitDict_170_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::AbsFitterInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::AbsFitterInfo*) (soff+(sizeof(genfit::AbsFitterInfo)*i)))->~G__TgenfitcLcLAbsFitterInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::AbsFitterInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::AbsFitterInfo*) (soff))->~G__TgenfitcLcLAbsFitterInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__genfitDict_170_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::AbsFitterInfo* dest = (genfit::AbsFitterInfo*) G__getstructoffset();
   const genfit::AbsFitterInfo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::DetPlane */
// automatic default constructor
static int G__genfitDict_261_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::DetPlane *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::DetPlane[n];
     } else {
       p = new((void*) gvp) genfit::DetPlane[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::DetPlane;
     } else {
       p = new((void*) gvp) genfit::DetPlane;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLDetPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__genfitDict_261_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genfit::DetPlane* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genfit::DetPlane(*(genfit::DetPlane*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLDetPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::DetPlane G__TgenfitcLcLDetPlane;
static int G__genfitDict_261_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::DetPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::DetPlane*) (soff+(sizeof(genfit::DetPlane)*i)))->~G__TgenfitcLcLDetPlane();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::DetPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::DetPlane*) (soff))->~G__TgenfitcLcLDetPlane();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__genfitDict_261_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::DetPlane* dest = (genfit::DetPlane*) G__getstructoffset();
   *dest = *(genfit::DetPlane*) libp->para[0].ref;
   const genfit::DetPlane& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::AbsTrackRep */
static int G__genfitDict_262_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToPlane(*(genfit::StateOnPlane*) libp->para[0].ref, (genfit::DetPlane*) G__int(libp->para[1])
, *(genfit::StateOnPlane*) libp->para[2].ref, (bool) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToPlane(*(genfit::StateOnPlane*) libp->para[0].ref, (genfit::DetPlane*) G__int(libp->para[1])
, *(genfit::StateOnPlane*) libp->para[2].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__genfitDict_262_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToLine(*(genfit::StateOnPlane*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, *(TVector3*) libp->para[2].ref, *(genfit::StateOnPlane*) libp->para[3].ref
, (bool) G__int(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToLine(*(genfit::StateOnPlane*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, *(TVector3*) libp->para[2].ref, *(genfit::StateOnPlane*) libp->para[3].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__genfitDict_262_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToPoint(*(genfit::StateOnPlane*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, *(genfit::StateOnPlane*) libp->para[2].ref, (bool) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToPoint(*(genfit::StateOnPlane*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, *(genfit::StateOnPlane*) libp->para[2].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__genfitDict_262_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToCylinder(*(genfit::StateOnPlane*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, *(TVector3*) libp->para[2].ref, (double) G__double(libp->para[3])
, *(genfit::StateOnPlane*) libp->para[4].ref, (bool) G__int(libp->para[5])));
      break;
   case 5:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToCylinder(*(genfit::StateOnPlane*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, *(TVector3*) libp->para[2].ref, (double) G__double(libp->para[3])
, *(genfit::StateOnPlane*) libp->para[4].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__genfitDict_262_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToSphere(*(genfit::StateOnPlane*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, (double) G__double(libp->para[2]), *(genfit::StateOnPlane*) libp->para[3].ref
, (bool) G__int(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToSphere(*(genfit::StateOnPlane*) libp->para[0].ref, *(TVector3*) libp->para[1].ref
, (double) G__double(libp->para[2]), *(genfit::StateOnPlane*) libp->para[3].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__genfitDict_262_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const genfit::AbsTrackRep*) G__getstructoffset())->getPos(*(genfit::StateOnPlane*) libp->para[0].ref);
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__genfitDict_262_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const genfit::AbsTrackRep*) G__getstructoffset())->getMom(*(genfit::StateOnPlane*) libp->para[0].ref);
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__genfitDict_262_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const genfit::AbsTrackRep*) G__getstructoffset())->extrapolateToTrackPoint());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__genfitDict_262_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::AbsTrackRep *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::AbsTrackRep[n];
     } else {
       p = new((void*) gvp) genfit::AbsTrackRep[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::AbsTrackRep;
     } else {
       p = new((void*) gvp) genfit::AbsTrackRep;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsTrackRep));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__genfitDict_262_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genfit::AbsTrackRep* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genfit::AbsTrackRep(*(genfit::AbsTrackRep*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsTrackRep));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::AbsTrackRep G__TgenfitcLcLAbsTrackRep;
static int G__genfitDict_262_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::AbsTrackRep*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::AbsTrackRep*) (soff+(sizeof(genfit::AbsTrackRep)*i)))->~G__TgenfitcLcLAbsTrackRep();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::AbsTrackRep*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::AbsTrackRep*) (soff))->~G__TgenfitcLcLAbsTrackRep();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__genfitDict_262_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::AbsTrackRep* dest = (genfit::AbsTrackRep*) G__getstructoffset();
   *dest = *(genfit::AbsTrackRep*) libp->para[0].ref;
   const genfit::AbsTrackRep& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::StateOnPlane */
static int G__genfitDict_263_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::StateOnPlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new genfit::StateOnPlane(*((genfit::DetPlane*) G__int(libp->para[0])), *((TVectorD*) G__int(libp->para[1])));
   } else {
     p = new((void*) gvp) genfit::StateOnPlane(*((genfit::DetPlane*) G__int(libp->para[0])), *((TVectorD*) G__int(libp->para[1])));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLStateOnPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__genfitDict_263_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genfit::StateOnPlane* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genfit::StateOnPlane(*(genfit::StateOnPlane*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLStateOnPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::StateOnPlane G__TgenfitcLcLStateOnPlane;
static int G__genfitDict_263_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::StateOnPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::StateOnPlane*) (soff+(sizeof(genfit::StateOnPlane)*i)))->~G__TgenfitcLcLStateOnPlane();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::StateOnPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::StateOnPlane*) (soff))->~G__TgenfitcLcLStateOnPlane();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__genfitDict_263_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::StateOnPlane* dest = (genfit::StateOnPlane*) G__getstructoffset();
   *dest = *(genfit::StateOnPlane*) libp->para[0].ref;
   const genfit::StateOnPlane& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::MeasuredStateOnPlane */
// automatic default constructor
static int G__genfitDict_264_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::MeasuredStateOnPlane *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::MeasuredStateOnPlane[n];
     } else {
       p = new((void*) gvp) genfit::MeasuredStateOnPlane[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::MeasuredStateOnPlane;
     } else {
       p = new((void*) gvp) genfit::MeasuredStateOnPlane;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLMeasuredStateOnPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__genfitDict_264_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genfit::MeasuredStateOnPlane* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genfit::MeasuredStateOnPlane(*(genfit::MeasuredStateOnPlane*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLMeasuredStateOnPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::MeasuredStateOnPlane G__TgenfitcLcLMeasuredStateOnPlane;
static int G__genfitDict_264_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::MeasuredStateOnPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::MeasuredStateOnPlane*) (soff+(sizeof(genfit::MeasuredStateOnPlane)*i)))->~G__TgenfitcLcLMeasuredStateOnPlane();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::MeasuredStateOnPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::MeasuredStateOnPlane*) (soff))->~G__TgenfitcLcLMeasuredStateOnPlane();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__genfitDict_264_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::MeasuredStateOnPlane* dest = (genfit::MeasuredStateOnPlane*) G__getstructoffset();
   *dest = *(genfit::MeasuredStateOnPlane*) libp->para[0].ref;
   const genfit::MeasuredStateOnPlane& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::KalmanFittedStateOnPlane */
// automatic default constructor
static int G__genfitDict_265_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::KalmanFittedStateOnPlane *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::KalmanFittedStateOnPlane[n];
     } else {
       p = new((void*) gvp) genfit::KalmanFittedStateOnPlane[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::KalmanFittedStateOnPlane;
     } else {
       p = new((void*) gvp) genfit::KalmanFittedStateOnPlane;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLKalmanFittedStateOnPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__genfitDict_265_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genfit::KalmanFittedStateOnPlane* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genfit::KalmanFittedStateOnPlane(*(genfit::KalmanFittedStateOnPlane*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLKalmanFittedStateOnPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::KalmanFittedStateOnPlane G__TgenfitcLcLKalmanFittedStateOnPlane;
static int G__genfitDict_265_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::KalmanFittedStateOnPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::KalmanFittedStateOnPlane*) (soff+(sizeof(genfit::KalmanFittedStateOnPlane)*i)))->~G__TgenfitcLcLKalmanFittedStateOnPlane();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::KalmanFittedStateOnPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::KalmanFittedStateOnPlane*) (soff))->~G__TgenfitcLcLKalmanFittedStateOnPlane();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__genfitDict_265_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::KalmanFittedStateOnPlane* dest = (genfit::KalmanFittedStateOnPlane*) G__getstructoffset();
   *dest = *(genfit::KalmanFittedStateOnPlane*) libp->para[0].ref;
   const genfit::KalmanFittedStateOnPlane& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::ReferenceStateOnPlane */
// automatic default constructor
static int G__genfitDict_267_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::ReferenceStateOnPlane *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::ReferenceStateOnPlane[n];
     } else {
       p = new((void*) gvp) genfit::ReferenceStateOnPlane[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::ReferenceStateOnPlane;
     } else {
       p = new((void*) gvp) genfit::ReferenceStateOnPlane;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLReferenceStateOnPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__genfitDict_267_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genfit::ReferenceStateOnPlane* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genfit::ReferenceStateOnPlane(*(genfit::ReferenceStateOnPlane*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLReferenceStateOnPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::ReferenceStateOnPlane G__TgenfitcLcLReferenceStateOnPlane;
static int G__genfitDict_267_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::ReferenceStateOnPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::ReferenceStateOnPlane*) (soff+(sizeof(genfit::ReferenceStateOnPlane)*i)))->~G__TgenfitcLcLReferenceStateOnPlane();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::ReferenceStateOnPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::ReferenceStateOnPlane*) (soff))->~G__TgenfitcLcLReferenceStateOnPlane();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__genfitDict_267_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::ReferenceStateOnPlane* dest = (genfit::ReferenceStateOnPlane*) G__getstructoffset();
   *dest = *(genfit::ReferenceStateOnPlane*) libp->para[0].ref;
   const genfit::ReferenceStateOnPlane& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::KalmanFitterInfo */
static int G__genfitDict_268_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         genfit::MeasuredStateOnPlane* pobj;
         genfit::MeasuredStateOnPlane xobj = ((genfit::KalmanFitterInfo*) G__getstructoffset())->getBiasedSmoothedState();
         pobj = new genfit::MeasuredStateOnPlane(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__genfitDict_268_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         genfit::MeasuredStateOnPlane* pobj;
         genfit::MeasuredStateOnPlane xobj = ((genfit::KalmanFitterInfo*) G__getstructoffset())->getUnbiasedSmoothedState();
         pobj = new genfit::MeasuredStateOnPlane(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__genfitDict_268_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         genfit::StateOnPlane* pobj;
         genfit::StateOnPlane xobj = ((genfit::KalmanFitterInfo*) G__getstructoffset())->getBiasedResidual();
         pobj = new genfit::StateOnPlane(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__genfitDict_268_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         genfit::StateOnPlane* pobj;
         genfit::StateOnPlane xobj = ((genfit::KalmanFitterInfo*) G__getstructoffset())->getUnbiasedResidual();
         pobj = new genfit::StateOnPlane(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__genfitDict_268_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::KalmanFitterInfo *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::KalmanFitterInfo[n];
     } else {
       p = new((void*) gvp) genfit::KalmanFitterInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::KalmanFitterInfo;
     } else {
       p = new((void*) gvp) genfit::KalmanFitterInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLKalmanFitterInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__genfitDict_268_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genfit::KalmanFitterInfo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genfit::KalmanFitterInfo(*(genfit::KalmanFitterInfo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLKalmanFitterInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::KalmanFitterInfo G__TgenfitcLcLKalmanFitterInfo;
static int G__genfitDict_268_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::KalmanFitterInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::KalmanFitterInfo*) (soff+(sizeof(genfit::KalmanFitterInfo)*i)))->~G__TgenfitcLcLKalmanFitterInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::KalmanFitterInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::KalmanFitterInfo*) (soff))->~G__TgenfitcLcLKalmanFitterInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__genfitDict_268_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::KalmanFitterInfo* dest = (genfit::KalmanFitterInfo*) G__getstructoffset();
   *dest = *(genfit::KalmanFitterInfo*) libp->para[0].ref;
   const genfit::KalmanFitterInfo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::TrackPoint */
// automatic default constructor
static int G__genfitDict_273_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::TrackPoint *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::TrackPoint[n];
     } else {
       p = new((void*) gvp) genfit::TrackPoint[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::TrackPoint;
     } else {
       p = new((void*) gvp) genfit::TrackPoint;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLTrackPoint));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__genfitDict_273_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genfit::TrackPoint* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genfit::TrackPoint(*(genfit::TrackPoint*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLTrackPoint));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::TrackPoint G__TgenfitcLcLTrackPoint;
static int G__genfitDict_273_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::TrackPoint*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::TrackPoint*) (soff+(sizeof(genfit::TrackPoint)*i)))->~G__TgenfitcLcLTrackPoint();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::TrackPoint*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::TrackPoint*) (soff))->~G__TgenfitcLcLTrackPoint();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__genfitDict_273_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::TrackPoint* dest = (genfit::TrackPoint*) G__getstructoffset();
   *dest = *(genfit::TrackPoint*) libp->para[0].ref;
   const genfit::TrackPoint& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::AbsMeasurement */
static int G__genfitDict_274_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         MeasurementOnPlane* pobj;
         MeasurementOnPlane xobj = ((genfit::AbsMeasurement*) G__getstructoffset())->constructMeasurementOnPlane();
         pobj = new MeasurementOnPlane(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__genfitDict_274_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::AbsMeasurement *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::AbsMeasurement[n];
     } else {
       p = new((void*) gvp) genfit::AbsMeasurement[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::AbsMeasurement;
     } else {
       p = new((void*) gvp) genfit::AbsMeasurement;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsMeasurement));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__genfitDict_274_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genfit::AbsMeasurement* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genfit::AbsMeasurement(*(genfit::AbsMeasurement*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsMeasurement));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::AbsMeasurement G__TgenfitcLcLAbsMeasurement;
static int G__genfitDict_274_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::AbsMeasurement*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::AbsMeasurement*) (soff+(sizeof(genfit::AbsMeasurement)*i)))->~G__TgenfitcLcLAbsMeasurement();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::AbsMeasurement*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::AbsMeasurement*) (soff))->~G__TgenfitcLcLAbsMeasurement();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__genfitDict_274_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::AbsMeasurement* dest = (genfit::AbsMeasurement*) G__getstructoffset();
   *dest = *(genfit::AbsMeasurement*) libp->para[0].ref;
   const genfit::AbsMeasurement& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::SpacePointMeasurement */
// automatic default constructor
static int G__genfitDict_275_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::SpacePointMeasurement *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::SpacePointMeasurement[n];
     } else {
       p = new((void*) gvp) genfit::SpacePointMeasurement[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::SpacePointMeasurement;
     } else {
       p = new((void*) gvp) genfit::SpacePointMeasurement;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLSpacePointMeasurement));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__genfitDict_275_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genfit::SpacePointMeasurement* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genfit::SpacePointMeasurement(*(genfit::SpacePointMeasurement*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLSpacePointMeasurement));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::SpacePointMeasurement G__TgenfitcLcLSpacePointMeasurement;
static int G__genfitDict_275_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::SpacePointMeasurement*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::SpacePointMeasurement*) (soff+(sizeof(genfit::SpacePointMeasurement)*i)))->~G__TgenfitcLcLSpacePointMeasurement();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::SpacePointMeasurement*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::SpacePointMeasurement*) (soff))->~G__TgenfitcLcLSpacePointMeasurement();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__genfitDict_275_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::SpacePointMeasurement* dest = (genfit::SpacePointMeasurement*) G__getstructoffset();
   *dest = *(genfit::SpacePointMeasurement*) libp->para[0].ref;
   const genfit::SpacePointMeasurement& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::ProlateSpacePointMeasurement */
// automatic default constructor
static int G__genfitDict_276_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::ProlateSpacePointMeasurement *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::ProlateSpacePointMeasurement[n];
     } else {
       p = new((void*) gvp) genfit::ProlateSpacePointMeasurement[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::ProlateSpacePointMeasurement;
     } else {
       p = new((void*) gvp) genfit::ProlateSpacePointMeasurement;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLProlateSpacePointMeasurement));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__genfitDict_276_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genfit::ProlateSpacePointMeasurement* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genfit::ProlateSpacePointMeasurement(*(genfit::ProlateSpacePointMeasurement*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLProlateSpacePointMeasurement));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::ProlateSpacePointMeasurement G__TgenfitcLcLProlateSpacePointMeasurement;
static int G__genfitDict_276_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::ProlateSpacePointMeasurement*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::ProlateSpacePointMeasurement*) (soff+(sizeof(genfit::ProlateSpacePointMeasurement)*i)))->~G__TgenfitcLcLProlateSpacePointMeasurement();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::ProlateSpacePointMeasurement*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::ProlateSpacePointMeasurement*) (soff))->~G__TgenfitcLcLProlateSpacePointMeasurement();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__genfitDict_276_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::ProlateSpacePointMeasurement* dest = (genfit::ProlateSpacePointMeasurement*) G__getstructoffset();
   *dest = *(genfit::ProlateSpacePointMeasurement*) libp->para[0].ref;
   const genfit::ProlateSpacePointMeasurement& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::TrackCandHit */
// automatic default constructor
static int G__genfitDict_277_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::TrackCandHit *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::TrackCandHit[n];
     } else {
       p = new((void*) gvp) genfit::TrackCandHit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::TrackCandHit;
     } else {
       p = new((void*) gvp) genfit::TrackCandHit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLTrackCandHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__genfitDict_277_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genfit::TrackCandHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genfit::TrackCandHit(*(genfit::TrackCandHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLTrackCandHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::TrackCandHit G__TgenfitcLcLTrackCandHit;
static int G__genfitDict_277_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::TrackCandHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::TrackCandHit*) (soff+(sizeof(genfit::TrackCandHit)*i)))->~G__TgenfitcLcLTrackCandHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::TrackCandHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::TrackCandHit*) (soff))->~G__TgenfitcLcLTrackCandHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__genfitDict_277_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::TrackCandHit* dest = (genfit::TrackCandHit*) G__getstructoffset();
   const genfit::TrackCandHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::MaterialInfo */
// automatic default constructor
static int G__genfitDict_278_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::MaterialInfo *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::MaterialInfo[n];
     } else {
       p = new((void*) gvp) genfit::MaterialInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::MaterialInfo;
     } else {
       p = new((void*) gvp) genfit::MaterialInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLMaterialInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__genfitDict_278_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genfit::MaterialInfo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genfit::MaterialInfo(*(genfit::MaterialInfo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLMaterialInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::MaterialInfo G__TgenfitcLcLMaterialInfo;
static int G__genfitDict_278_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::MaterialInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::MaterialInfo*) (soff+(sizeof(genfit::MaterialInfo)*i)))->~G__TgenfitcLcLMaterialInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::MaterialInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::MaterialInfo*) (soff))->~G__TgenfitcLcLMaterialInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__genfitDict_278_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::MaterialInfo* dest = (genfit::MaterialInfo*) G__getstructoffset();
   *dest = *(genfit::MaterialInfo*) libp->para[0].ref;
   const genfit::MaterialInfo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::RectangularFinitePlane */
// automatic default constructor
static int G__genfitDict_279_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::RectangularFinitePlane *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::RectangularFinitePlane[n];
     } else {
       p = new((void*) gvp) genfit::RectangularFinitePlane[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::RectangularFinitePlane;
     } else {
       p = new((void*) gvp) genfit::RectangularFinitePlane;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLRectangularFinitePlane));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__genfitDict_279_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genfit::RectangularFinitePlane* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genfit::RectangularFinitePlane(*(genfit::RectangularFinitePlane*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLRectangularFinitePlane));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::RectangularFinitePlane G__TgenfitcLcLRectangularFinitePlane;
static int G__genfitDict_279_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::RectangularFinitePlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::RectangularFinitePlane*) (soff+(sizeof(genfit::RectangularFinitePlane)*i)))->~G__TgenfitcLcLRectangularFinitePlane();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::RectangularFinitePlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::RectangularFinitePlane*) (soff))->~G__TgenfitcLcLRectangularFinitePlane();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__genfitDict_279_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::RectangularFinitePlane* dest = (genfit::RectangularFinitePlane*) G__getstructoffset();
   *dest = *(genfit::RectangularFinitePlane*) libp->para[0].ref;
   const genfit::RectangularFinitePlane& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::Track */
static int G__genfitDict_280_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((genfit::Track*) G__getstructoffset())->insertPoint((int) G__int(libp->para[0]), *((genfit::TrackPoint*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__genfitDict_280_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((genfit::Track*) G__getstructoffset())->removePoint((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__genfitDict_280_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((genfit::Track*) G__getstructoffset())->mergeTrack((int) G__int(libp->para[0]), *((genfit::Track*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__genfitDict_280_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::Track *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::Track[n];
     } else {
       p = new((void*) gvp) genfit::Track[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::Track;
     } else {
       p = new((void*) gvp) genfit::Track;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__genfitDict_280_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genfit::Track* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genfit::Track(*(genfit::Track*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::Track G__TgenfitcLcLTrack;
static int G__genfitDict_280_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::Track*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::Track*) (soff+(sizeof(genfit::Track)*i)))->~G__TgenfitcLcLTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::Track*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::Track*) (soff))->~G__TgenfitcLcLTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__genfitDict_280_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::Track* dest = (genfit::Track*) G__getstructoffset();
   *dest = *(genfit::Track*) libp->para[0].ref;
   const genfit::Track& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::PlanarMeasurement */
// automatic default constructor
static int G__genfitDict_297_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::PlanarMeasurement *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::PlanarMeasurement[n];
     } else {
       p = new((void*) gvp) genfit::PlanarMeasurement[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::PlanarMeasurement;
     } else {
       p = new((void*) gvp) genfit::PlanarMeasurement;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLPlanarMeasurement));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__genfitDict_297_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genfit::PlanarMeasurement* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genfit::PlanarMeasurement(*(genfit::PlanarMeasurement*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLPlanarMeasurement));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::PlanarMeasurement G__TgenfitcLcLPlanarMeasurement;
static int G__genfitDict_297_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::PlanarMeasurement*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::PlanarMeasurement*) (soff+(sizeof(genfit::PlanarMeasurement)*i)))->~G__TgenfitcLcLPlanarMeasurement();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::PlanarMeasurement*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::PlanarMeasurement*) (soff))->~G__TgenfitcLcLPlanarMeasurement();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__genfitDict_297_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::PlanarMeasurement* dest = (genfit::PlanarMeasurement*) G__getstructoffset();
   *dest = *(genfit::PlanarMeasurement*) libp->para[0].ref;
   const genfit::PlanarMeasurement& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::WireMeasurement */
// automatic default constructor
static int G__genfitDict_298_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::WireMeasurement *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::WireMeasurement[n];
     } else {
       p = new((void*) gvp) genfit::WireMeasurement[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::WireMeasurement;
     } else {
       p = new((void*) gvp) genfit::WireMeasurement;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLWireMeasurement));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__genfitDict_298_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genfit::WireMeasurement* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genfit::WireMeasurement(*(genfit::WireMeasurement*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLWireMeasurement));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::WireMeasurement G__TgenfitcLcLWireMeasurement;
static int G__genfitDict_298_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::WireMeasurement*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::WireMeasurement*) (soff+(sizeof(genfit::WireMeasurement)*i)))->~G__TgenfitcLcLWireMeasurement();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::WireMeasurement*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::WireMeasurement*) (soff))->~G__TgenfitcLcLWireMeasurement();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__genfitDict_298_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::WireMeasurement* dest = (genfit::WireMeasurement*) G__getstructoffset();
   *dest = *(genfit::WireMeasurement*) libp->para[0].ref;
   const genfit::WireMeasurement& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::PlanarPixelMeasurement */
// automatic default constructor
static int G__genfitDict_299_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::PlanarPixelMeasurement *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::PlanarPixelMeasurement[n];
     } else {
       p = new((void*) gvp) genfit::PlanarPixelMeasurement[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::PlanarPixelMeasurement;
     } else {
       p = new((void*) gvp) genfit::PlanarPixelMeasurement;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLPlanarPixelMeasurement));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__genfitDict_299_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genfit::PlanarPixelMeasurement* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genfit::PlanarPixelMeasurement(*(genfit::PlanarPixelMeasurement*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLPlanarPixelMeasurement));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::PlanarPixelMeasurement G__TgenfitcLcLPlanarPixelMeasurement;
static int G__genfitDict_299_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::PlanarPixelMeasurement*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::PlanarPixelMeasurement*) (soff+(sizeof(genfit::PlanarPixelMeasurement)*i)))->~G__TgenfitcLcLPlanarPixelMeasurement();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::PlanarPixelMeasurement*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::PlanarPixelMeasurement*) (soff))->~G__TgenfitcLcLPlanarPixelMeasurement();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__genfitDict_299_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::PlanarPixelMeasurement* dest = (genfit::PlanarPixelMeasurement*) G__getstructoffset();
   *dest = *(genfit::PlanarPixelMeasurement*) libp->para[0].ref;
   const genfit::PlanarPixelMeasurement& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::WirePointMeasurement */
// automatic default constructor
static int G__genfitDict_300_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::WirePointMeasurement *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::WirePointMeasurement[n];
     } else {
       p = new((void*) gvp) genfit::WirePointMeasurement[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::WirePointMeasurement;
     } else {
       p = new((void*) gvp) genfit::WirePointMeasurement;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLWirePointMeasurement));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__genfitDict_300_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genfit::WirePointMeasurement* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genfit::WirePointMeasurement(*(genfit::WirePointMeasurement*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLWirePointMeasurement));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::WirePointMeasurement G__TgenfitcLcLWirePointMeasurement;
static int G__genfitDict_300_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::WirePointMeasurement*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::WirePointMeasurement*) (soff+(sizeof(genfit::WirePointMeasurement)*i)))->~G__TgenfitcLcLWirePointMeasurement();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::WirePointMeasurement*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::WirePointMeasurement*) (soff))->~G__TgenfitcLcLWirePointMeasurement();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__genfitDict_300_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::WirePointMeasurement* dest = (genfit::WirePointMeasurement*) G__getstructoffset();
   *dest = *(genfit::WirePointMeasurement*) libp->para[0].ref;
   const genfit::WirePointMeasurement& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::PlanarStripMeasurement */
// automatic default constructor
static int G__genfitDict_301_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::PlanarStripMeasurement *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::PlanarStripMeasurement[n];
     } else {
       p = new((void*) gvp) genfit::PlanarStripMeasurement[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::PlanarStripMeasurement;
     } else {
       p = new((void*) gvp) genfit::PlanarStripMeasurement;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLPlanarStripMeasurement));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__genfitDict_301_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genfit::PlanarStripMeasurement* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genfit::PlanarStripMeasurement(*(genfit::PlanarStripMeasurement*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLPlanarStripMeasurement));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::PlanarStripMeasurement G__TgenfitcLcLPlanarStripMeasurement;
static int G__genfitDict_301_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::PlanarStripMeasurement*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::PlanarStripMeasurement*) (soff+(sizeof(genfit::PlanarStripMeasurement)*i)))->~G__TgenfitcLcLPlanarStripMeasurement();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::PlanarStripMeasurement*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::PlanarStripMeasurement*) (soff))->~G__TgenfitcLcLPlanarStripMeasurement();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__genfitDict_301_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::PlanarStripMeasurement* dest = (genfit::PlanarStripMeasurement*) G__getstructoffset();
   *dest = *(genfit::PlanarStripMeasurement*) libp->para[0].ref;
   const genfit::PlanarStripMeasurement& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* genfit::TrackCand */
// automatic default constructor
static int G__genfitDict_302_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::TrackCand *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::TrackCand[n];
     } else {
       p = new((void*) gvp) genfit::TrackCand[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new genfit::TrackCand;
     } else {
       p = new((void*) gvp) genfit::TrackCand;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLTrackCand));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__genfitDict_302_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   genfit::TrackCand* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new genfit::TrackCand(*(genfit::TrackCand*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLTrackCand));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef genfit::TrackCand G__TgenfitcLcLTrackCand;
static int G__genfitDict_302_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (genfit::TrackCand*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((genfit::TrackCand*) (soff+(sizeof(genfit::TrackCand)*i)))->~G__TgenfitcLcLTrackCand();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (genfit::TrackCand*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((genfit::TrackCand*) (soff))->~G__TgenfitcLcLTrackCand();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__genfitDict_302_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   genfit::TrackCand* dest = (genfit::TrackCand*) G__getstructoffset();
   *dest = *(genfit::TrackCand*) libp->para[0].ref;
   const genfit::TrackCand& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* genfit::AbsFinitePlane */

/* genfit::AbsFitterInfo */

/* genfit::DetPlane */

/* genfit::AbsTrackRep */

/* genfit::StateOnPlane */

/* genfit::MeasuredStateOnPlane */

/* genfit::KalmanFittedStateOnPlane */

/* genfit::ReferenceStateOnPlane */

/* genfit::KalmanFitterInfo */

/* genfit::TrackPoint */

/* genfit::AbsMeasurement */

/* genfit::SpacePointMeasurement */

/* genfit::ProlateSpacePointMeasurement */

/* genfit::TrackCandHit */

/* genfit::MaterialInfo */

/* genfit::RectangularFinitePlane */

/* genfit::Track */

/* genfit::PlanarMeasurement */

/* genfit::WireMeasurement */

/* genfit::PlanarPixelMeasurement */

/* genfit::WirePointMeasurement */

/* genfit::PlanarStripMeasurement */

/* genfit::TrackCand */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncgenfitDict {
 public:
  G__Sizep2memfuncgenfitDict(): p(&G__Sizep2memfuncgenfitDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncgenfitDict::*p)();
};

size_t G__get_sizep2memfuncgenfitDict()
{
  G__Sizep2memfuncgenfitDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancegenfitDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLMeasuredStateOnPlane))) {
     genfit::MeasuredStateOnPlane *G__Lderived;
     G__Lderived=(genfit::MeasuredStateOnPlane*)0x1000;
     {
       genfit::StateOnPlane *G__Lpbase=(genfit::StateOnPlane*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLMeasuredStateOnPlane),G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLStateOnPlane),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLKalmanFittedStateOnPlane))) {
     genfit::KalmanFittedStateOnPlane *G__Lderived;
     G__Lderived=(genfit::KalmanFittedStateOnPlane*)0x1000;
     {
       genfit::MeasuredStateOnPlane *G__Lpbase=(genfit::MeasuredStateOnPlane*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLKalmanFittedStateOnPlane),G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLMeasuredStateOnPlane),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       genfit::StateOnPlane *G__Lpbase=(genfit::StateOnPlane*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLKalmanFittedStateOnPlane),G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLStateOnPlane),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLReferenceStateOnPlane))) {
     genfit::ReferenceStateOnPlane *G__Lderived;
     G__Lderived=(genfit::ReferenceStateOnPlane*)0x1000;
     {
       genfit::StateOnPlane *G__Lpbase=(genfit::StateOnPlane*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLReferenceStateOnPlane),G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLStateOnPlane),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLKalmanFitterInfo))) {
     genfit::KalmanFitterInfo *G__Lderived;
     G__Lderived=(genfit::KalmanFitterInfo*)0x1000;
     {
       genfit::AbsFitterInfo *G__Lpbase=(genfit::AbsFitterInfo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLKalmanFitterInfo),G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsFitterInfo),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLSpacePointMeasurement))) {
     genfit::SpacePointMeasurement *G__Lderived;
     G__Lderived=(genfit::SpacePointMeasurement*)0x1000;
     {
       genfit::AbsMeasurement *G__Lpbase=(genfit::AbsMeasurement*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLSpacePointMeasurement),G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsMeasurement),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLProlateSpacePointMeasurement))) {
     genfit::ProlateSpacePointMeasurement *G__Lderived;
     G__Lderived=(genfit::ProlateSpacePointMeasurement*)0x1000;
     {
       genfit::SpacePointMeasurement *G__Lpbase=(genfit::SpacePointMeasurement*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLProlateSpacePointMeasurement),G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLSpacePointMeasurement),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       genfit::AbsMeasurement *G__Lpbase=(genfit::AbsMeasurement*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLProlateSpacePointMeasurement),G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsMeasurement),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLRectangularFinitePlane))) {
     genfit::RectangularFinitePlane *G__Lderived;
     G__Lderived=(genfit::RectangularFinitePlane*)0x1000;
     {
       genfit::AbsFinitePlane *G__Lpbase=(genfit::AbsFinitePlane*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLRectangularFinitePlane),G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsFinitePlane),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLPlanarMeasurement))) {
     genfit::PlanarMeasurement *G__Lderived;
     G__Lderived=(genfit::PlanarMeasurement*)0x1000;
     {
       genfit::AbsMeasurement *G__Lpbase=(genfit::AbsMeasurement*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLPlanarMeasurement),G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsMeasurement),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLWireMeasurement))) {
     genfit::WireMeasurement *G__Lderived;
     G__Lderived=(genfit::WireMeasurement*)0x1000;
     {
       genfit::AbsMeasurement *G__Lpbase=(genfit::AbsMeasurement*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLWireMeasurement),G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsMeasurement),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLPlanarPixelMeasurement))) {
     genfit::PlanarPixelMeasurement *G__Lderived;
     G__Lderived=(genfit::PlanarPixelMeasurement*)0x1000;
     {
       genfit::PlanarMeasurement *G__Lpbase=(genfit::PlanarMeasurement*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLPlanarPixelMeasurement),G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLPlanarMeasurement),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       genfit::AbsMeasurement *G__Lpbase=(genfit::AbsMeasurement*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLPlanarPixelMeasurement),G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsMeasurement),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLWirePointMeasurement))) {
     genfit::WirePointMeasurement *G__Lderived;
     G__Lderived=(genfit::WirePointMeasurement*)0x1000;
     {
       genfit::WireMeasurement *G__Lpbase=(genfit::WireMeasurement*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLWirePointMeasurement),G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLWireMeasurement),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       genfit::AbsMeasurement *G__Lpbase=(genfit::AbsMeasurement*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLWirePointMeasurement),G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsMeasurement),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLPlanarStripMeasurement))) {
     genfit::PlanarStripMeasurement *G__Lderived;
     G__Lderived=(genfit::PlanarStripMeasurement*)0x1000;
     {
       genfit::PlanarMeasurement *G__Lpbase=(genfit::PlanarMeasurement*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLPlanarStripMeasurement),G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLPlanarMeasurement),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       genfit::AbsMeasurement *G__Lpbase=(genfit::AbsMeasurement*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLPlanarStripMeasurement),G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsMeasurement),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablegenfitDict() {

   /* Setting up typedef entry */
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__genfitDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__genfitDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__genfitDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__genfitDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__genfitDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__genfitDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__genfitDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__genfitDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__genfitDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__genfitDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorD",117,G__get_linked_tagnum(&G__genfitDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSym<Double_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTSymlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Double_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Double_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTColumn_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Double_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Double_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTFlat_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Double_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTSub_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Double_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTSparseRow_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Double_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTSparseDiag_constlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Double_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Double_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTColumnlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Double_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Double_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTFlatlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Double_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTSublEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Double_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTSparseRowlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Double_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTSparseDiaglEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Double_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TElementActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Double_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TElementPosActionTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Double_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparse<Double_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTSparselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__genfitDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<::MeasurementOnPlane>",117,G__get_linked_tagnum(&G__genfitDictLN_vectorlEMeasurementOnPlanecOallocatorlEMeasurementOnPlanegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__genfitDictLN_reverse_iteratorlEvectorlEMeasurementOnPlanecOallocatorlEMeasurementOnPlanegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__genfitDictLN_vectorlEMeasurementOnPlanecOallocatorlEMeasurementOnPlanegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__genfitDictLN_reverse_iteratorlEvectorlEMeasurementOnPlanecOallocatorlEMeasurementOnPlanegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__genfitDictLN_vectorlEMeasurementOnPlanecOallocatorlEMeasurementOnPlanegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<MeasurementOnPlane>",117,G__get_linked_tagnum(&G__genfitDictLN_vectorlEMeasurementOnPlanecOallocatorlEMeasurementOnPlanegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<AbsMeasurement*>",117,G__get_linked_tagnum(&G__genfitDictLN_vectorlEgenfitcLcLAbsMeasurementmUcOallocatorlEgenfitcLcLAbsMeasurementmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__genfitDictLN_reverse_iteratorlEvectorlEgenfitcLcLAbsMeasurementmUcOallocatorlEgenfitcLcLAbsMeasurementmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__genfitDictLN_vectorlEgenfitcLcLAbsMeasurementmUcOallocatorlEgenfitcLcLAbsMeasurementmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__genfitDictLN_reverse_iteratorlEvectorlEgenfitcLcLAbsMeasurementmUcOallocatorlEgenfitcLcLAbsMeasurementmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__genfitDictLN_vectorlEgenfitcLcLAbsMeasurementmUcOallocatorlEgenfitcLcLAbsMeasurementmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<genfit::AbsMeasurement*>",117,G__get_linked_tagnum(&G__genfitDictLN_vectorlEgenfitcLcLAbsMeasurementmUcOallocatorlEgenfitcLcLAbsMeasurementmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<KalmanFitterInfo>",117,G__get_linked_tagnum(&G__genfitDictLN_vectorlEgenfitcLcLKalmanFitterInfocOallocatorlEgenfitcLcLKalmanFitterInfogRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__genfitDictLN_reverse_iteratorlEvectorlEgenfitcLcLKalmanFitterInfocOallocatorlEgenfitcLcLKalmanFitterInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__genfitDictLN_vectorlEgenfitcLcLKalmanFitterInfocOallocatorlEgenfitcLcLKalmanFitterInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__genfitDictLN_reverse_iteratorlEvectorlEgenfitcLcLKalmanFitterInfocOallocatorlEgenfitcLcLKalmanFitterInfogRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__genfitDictLN_vectorlEgenfitcLcLKalmanFitterInfocOallocatorlEgenfitcLcLKalmanFitterInfogRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<genfit::KalmanFitterInfo>",117,G__get_linked_tagnum(&G__genfitDictLN_vectorlEgenfitcLcLKalmanFitterInfocOallocatorlEgenfitcLcLKalmanFitterInfogRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TrackPoint>",117,G__get_linked_tagnum(&G__genfitDictLN_vectorlEgenfitcLcLTrackPointcOallocatorlEgenfitcLcLTrackPointgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__genfitDictLN_reverse_iteratorlEvectorlEgenfitcLcLTrackPointcOallocatorlEgenfitcLcLTrackPointgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__genfitDictLN_vectorlEgenfitcLcLTrackPointcOallocatorlEgenfitcLcLTrackPointgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__genfitDictLN_reverse_iteratorlEvectorlEgenfitcLcLTrackPointcOallocatorlEgenfitcLcLTrackPointgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__genfitDictLN_vectorlEgenfitcLcLTrackPointcOallocatorlEgenfitcLcLTrackPointgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<genfit::TrackPoint>",117,G__get_linked_tagnum(&G__genfitDictLN_vectorlEgenfitcLcLTrackPointcOallocatorlEgenfitcLcLTrackPointgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<AbsTrackRep*>",117,G__get_linked_tagnum(&G__genfitDictLN_vectorlEgenfitcLcLAbsTrackRepmUcOallocatorlEgenfitcLcLAbsTrackRepmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__genfitDictLN_reverse_iteratorlEvectorlEgenfitcLcLAbsTrackRepmUcOallocatorlEgenfitcLcLAbsTrackRepmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__genfitDictLN_vectorlEgenfitcLcLAbsTrackRepmUcOallocatorlEgenfitcLcLAbsTrackRepmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__genfitDictLN_reverse_iteratorlEvectorlEgenfitcLcLAbsTrackRepmUcOallocatorlEgenfitcLcLAbsTrackRepmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__genfitDictLN_vectorlEgenfitcLcLAbsTrackRepmUcOallocatorlEgenfitcLcLAbsTrackRepmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<genfit::AbsTrackRep*>",117,G__get_linked_tagnum(&G__genfitDictLN_vectorlEgenfitcLcLAbsTrackRepmUcOallocatorlEgenfitcLcLAbsTrackRepmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TrackCandHit>",117,G__get_linked_tagnum(&G__genfitDictLN_vectorlEgenfitcLcLTrackCandHitcOallocatorlEgenfitcLcLTrackCandHitgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__genfitDictLN_reverse_iteratorlEvectorlEgenfitcLcLTrackCandHitcOallocatorlEgenfitcLcLTrackCandHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__genfitDictLN_vectorlEgenfitcLcLTrackCandHitcOallocatorlEgenfitcLcLTrackCandHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__genfitDictLN_reverse_iteratorlEvectorlEgenfitcLcLTrackCandHitcOallocatorlEgenfitcLcLTrackCandHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__genfitDictLN_vectorlEgenfitcLcLTrackCandHitcOallocatorlEgenfitcLcLTrackCandHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<genfit::TrackCandHit>",117,G__get_linked_tagnum(&G__genfitDictLN_vectorlEgenfitcLcLTrackCandHitcOallocatorlEgenfitcLcLTrackCandHitgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* genfit::AbsFinitePlane */
static void G__setup_memvargenfitcLcLAbsFinitePlane(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsFinitePlane));
   { genfit::AbsFinitePlane *p; p=(genfit::AbsFinitePlane*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genfit::AbsFitterInfo */
static void G__setup_memvargenfitcLcLAbsFitterInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsFitterInfo));
   { genfit::AbsFitterInfo *p; p=(genfit::AbsFitterInfo*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* genfit::DetPlane */
static void G__setup_memvargenfitcLcLDetPlane(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLDetPlane));
   { genfit::DetPlane *p; p=(genfit::DetPlane*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__genfitDictLN_TVector3),-1,-1,4,"o_=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__genfitDictLN_TVector3),-1,-1,4,"u_=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__genfitDictLN_TVector3),-1,-1,4,"v_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->finitePlane_)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsFinitePlane),-1,-1,1,"finitePlane_=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genfit::AbsTrackRep */
static void G__setup_memvargenfitcLcLAbsTrackRep(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsTrackRep));
   { genfit::AbsTrackRep *p; p=(genfit::AbsTrackRep*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"pdgCode_=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genfit::StateOnPlane */
static void G__setup_memvargenfitcLcLStateOnPlane(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLStateOnPlane));
   { genfit::StateOnPlane *p; p=(genfit::StateOnPlane*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__genfitDictLN_TVectorTlEdoublegR),G__defined_typename("TVectorD"),-1,2,"state_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sharedPlane_)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLDetPlane),-1,-1,1,"sharedPlane_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rep_)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsTrackRep),-1,-1,1,"rep_=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genfit::MeasuredStateOnPlane */
static void G__setup_memvargenfitcLcLMeasuredStateOnPlane(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLMeasuredStateOnPlane));
   { genfit::MeasuredStateOnPlane *p; p=(genfit::MeasuredStateOnPlane*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTSymlEdoublegR),G__defined_typename("TMatrixDSym"),-1,2,"cov_=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genfit::KalmanFittedStateOnPlane */
static void G__setup_memvargenfitcLcLKalmanFittedStateOnPlane(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLKalmanFittedStateOnPlane));
   { genfit::KalmanFittedStateOnPlane *p; p=(genfit::KalmanFittedStateOnPlane*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->chiSquareIncrement_)-(long)(p)),100,0,0,-1,-1,-1,1,"chiSquareIncrement_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ndf_)-(long)(p)),100,0,0,-1,-1,-1,1,"ndf_=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genfit::ReferenceStateOnPlane */
static void G__setup_memvargenfitcLcLReferenceStateOnPlane(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLReferenceStateOnPlane));
   { genfit::ReferenceStateOnPlane *p; p=(genfit::ReferenceStateOnPlane*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->forwardSegmentLength_)-(long)(p)),100,0,0,-1,-1,-1,1,"forwardSegmentLength_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->backwardSegmentLength_)-(long)(p)),100,0,0,-1,-1,-1,1,"backwardSegmentLength_=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTlEdoublegR),G__defined_typename("TMatrixD"),-1,2,"forwardTransportMatrix=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTlEdoublegR),G__defined_typename("TMatrixD"),-1,2,"backwardTransportMatrix=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTSymlEdoublegR),G__defined_typename("TMatrixDSym"),-1,2,"forwardNoiseMatrix=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTSymlEdoublegR),G__defined_typename("TMatrixDSym"),-1,2,"backwardNoiseMatrix=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genfit::KalmanFitterInfo */
static void G__setup_memvargenfitcLcLKalmanFitterInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLKalmanFitterInfo));
   { genfit::KalmanFitterInfo *p; p=(genfit::KalmanFitterInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->referenceState_)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLReferenceStateOnPlane),-1,-1,1,"referenceState_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->forwardPrediction_)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLMeasuredStateOnPlane),-1,-1,1,"forwardPrediction_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->forwardUpdate_)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLKalmanFittedStateOnPlane),-1,-1,1,"forwardUpdate_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->backwardPrediction_)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLMeasuredStateOnPlane),-1,-1,1,"backwardPrediction_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->backwardUpdate_)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLKalmanFittedStateOnPlane),-1,-1,1,"backwardUpdate_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->measurementsOnPlane_)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__genfitDictLN_vectorlEMeasurementOnPlanecOallocatorlEMeasurementOnPlanegRsPgR),G__defined_typename("vector<::MeasurementOnPlane>"),-1,1,"measurementsOnPlane_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rep_)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsTrackRep),-1,-1,1,"rep_=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genfit::TrackPoint */
static void G__setup_memvargenfitcLcLTrackPoint(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLTrackPoint));
   { genfit::TrackPoint *p; p=(genfit::TrackPoint*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->sortingParameter_)-(long)(p)),100,0,0,-1,-1,-1,1,"sortingParameter_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trackPoints_)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLTrack),-1,-1,1,"trackPoints_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rawMeasurements_)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__genfitDictLN_vectorlEgenfitcLcLAbsMeasurementmUcOallocatorlEgenfitcLcLAbsMeasurementmUgRsPgR),G__defined_typename("vector<AbsMeasurement*>"),-1,1,"rawMeasurements_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fitterInfos_)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__genfitDictLN_vectorlEgenfitcLcLKalmanFitterInfocOallocatorlEgenfitcLcLKalmanFitterInfogRsPgR),G__defined_typename("vector<KalmanFitterInfo>"),-1,1,"fitterInfos_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->material_)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLMaterialInfo),-1,-1,1,"material_=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genfit::AbsMeasurement */
static void G__setup_memvargenfitcLcLAbsMeasurement(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsMeasurement));
   { genfit::AbsMeasurement *p; p=(genfit::AbsMeasurement*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__genfitDictLN_TVectorTlEdoublegR),G__defined_typename("TVectorD"),-1,2,"rawHitCoords_=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__genfitDictLN_TMatrixTSymlEdoublegR),G__defined_typename("TMatrixDSym"),-1,2,"rawHitCov_=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"detId_=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"hitId_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->rawMeasurements_)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLTrackPoint),-1,-1,1,"rawMeasurements_=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genfit::SpacePointMeasurement */
static void G__setup_memvargenfitcLcLSpacePointMeasurement(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLSpacePointMeasurement));
   { genfit::SpacePointMeasurement *p; p=(genfit::SpacePointMeasurement*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* genfit::ProlateSpacePointMeasurement */
static void G__setup_memvargenfitcLcLProlateSpacePointMeasurement(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLProlateSpacePointMeasurement));
   { genfit::ProlateSpacePointMeasurement *p; p=(genfit::ProlateSpacePointMeasurement*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* genfit::TrackCandHit */
static void G__setup_memvargenfitcLcLTrackCandHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLTrackCandHit));
   { genfit::TrackCandHit *p; p=(genfit::TrackCandHit*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* genfit::MaterialInfo */
static void G__setup_memvargenfitcLcLMaterialInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLMaterialInfo));
   { genfit::MaterialInfo *p; p=(genfit::MaterialInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->sharedPlane_)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLDetPlane),-1,-1,1,"sharedPlane_=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genfit::RectangularFinitePlane */
static void G__setup_memvargenfitcLcLRectangularFinitePlane(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLRectangularFinitePlane));
   { genfit::RectangularFinitePlane *p; p=(genfit::RectangularFinitePlane*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* genfit::Track */
static void G__setup_memvargenfitcLcLTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLTrack));
   { genfit::Track *p; p=(genfit::Track*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trackPoints_)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__genfitDictLN_vectorlEgenfitcLcLTrackPointcOallocatorlEgenfitcLcLTrackPointgRsPgR),G__defined_typename("vector<TrackPoint>"),-1,1,"trackPoints_=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->trackReps_)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__genfitDictLN_vectorlEgenfitcLcLAbsTrackRepmUcOallocatorlEgenfitcLcLAbsTrackRepmUgRsPgR),G__defined_typename("vector<AbsTrackRep*>"),-1,1,"trackReps_=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genfit::PlanarMeasurement */
static void G__setup_memvargenfitcLcLPlanarMeasurement(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLPlanarMeasurement));
   { genfit::PlanarMeasurement *p; p=(genfit::PlanarMeasurement*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"planeId_=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genfit::WireMeasurement */
static void G__setup_memvargenfitcLcLWireMeasurement(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLWireMeasurement));
   { genfit::WireMeasurement *p; p=(genfit::WireMeasurement*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"leftRight_=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* genfit::PlanarPixelMeasurement */
static void G__setup_memvargenfitcLcLPlanarPixelMeasurement(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLPlanarPixelMeasurement));
   { genfit::PlanarPixelMeasurement *p; p=(genfit::PlanarPixelMeasurement*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* genfit::WirePointMeasurement */
static void G__setup_memvargenfitcLcLWirePointMeasurement(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLWirePointMeasurement));
   { genfit::WirePointMeasurement *p; p=(genfit::WirePointMeasurement*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* genfit::PlanarStripMeasurement */
static void G__setup_memvargenfitcLcLPlanarStripMeasurement(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLPlanarStripMeasurement));
   { genfit::PlanarStripMeasurement *p; p=(genfit::PlanarStripMeasurement*)0x1000; if (p) { }
   }
   G__tag_memvar_reset();
}


   /* genfit::TrackCand */
static void G__setup_memvargenfitcLcLTrackCand(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLTrackCand));
   { genfit::TrackCand *p; p=(genfit::TrackCand*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->myTrackCandHit)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__genfitDictLN_vectorlEgenfitcLcLTrackCandHitcOallocatorlEgenfitcLcLTrackCandHitgRsPgR),G__defined_typename("vector<TrackCandHit>"),-1,1,"myTrackCandHit=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvargenfitDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncgenfitcLcLAbsFinitePlane(void) {
   /* genfit::AbsFinitePlane */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsFinitePlane));
   G__memfunc_setup("isInActive",1007,G__genfitDict_169_0_1, 103, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - u d - - 0 - v", (char*)NULL, (void*) NULL, 1);
   // automatic default constructor
   G__memfunc_setup("AbsFinitePlane", 1381, G__genfitDict_169_0_2, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsFinitePlane), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("AbsFinitePlane", 1381, G__genfitDict_169_0_3, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsFinitePlane), -1, 0, 1, 1, 1, 0, "u 'genfit::AbsFinitePlane' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AbsFinitePlane", 1507, G__genfitDict_169_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__genfitDict_169_0_5, (int) ('u'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsFinitePlane), -1, 1, 1, 1, 1, 0, "u 'genfit::AbsFinitePlane' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLAbsFitterInfo(void) {
   /* genfit::AbsFitterInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsFitterInfo));
   // automatic default constructor
   G__memfunc_setup("AbsFitterInfo", 1296, G__genfitDict_170_0_1, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsFitterInfo), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("AbsFitterInfo", 1296, G__genfitDict_170_0_2, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsFitterInfo), -1, 0, 1, 1, 1, 0, "u 'genfit::AbsFitterInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AbsFitterInfo", 1422, G__genfitDict_170_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__genfitDict_170_0_4, (int) ('u'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsFitterInfo), -1, 1, 1, 1, 1, 0, "u 'genfit::AbsFitterInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLDetPlane(void) {
   /* genfit::DetPlane */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLDetPlane));
   // automatic default constructor
   G__memfunc_setup("DetPlane", 781, G__genfitDict_261_0_1, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLDetPlane), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("DetPlane", 781, G__genfitDict_261_0_2, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLDetPlane), -1, 0, 1, 1, 1, 0, "u 'genfit::DetPlane' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~DetPlane", 907, G__genfitDict_261_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__genfitDict_261_0_4, (int) ('u'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLDetPlane), -1, 1, 1, 1, 1, 0, "u 'genfit::DetPlane' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLAbsTrackRep(void) {
   /* genfit::AbsTrackRep */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsTrackRep));
   G__memfunc_setup("extrapolateToPlane",1884,G__genfitDict_262_0_1, 100, -1, -1, 0, 4, 1, 1, 8, 
"u 'genfit::StateOnPlane' - 11 - stateInput U 'genfit::DetPlane' - 10 - plane "
"u 'genfit::StateOnPlane' - 1 - statePrediction g - - 0 'false' stopAtBoundary", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("extrapolateToLine",1780,G__genfitDict_262_0_2, 100, -1, -1, 0, 5, 1, 1, 8, 
"u 'genfit::StateOnPlane' - 11 - stateInput u 'TVector3' - 11 - linePoint "
"u 'TVector3' - 11 - lineDirection u 'genfit::StateOnPlane' - 1 - statePrediction "
"g - - 0 'false' stopAtBoundary", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("extrapolateToPoint",1910,G__genfitDict_262_0_3, 100, -1, -1, 0, 4, 1, 1, 8, 
"u 'genfit::StateOnPlane' - 11 - stateInput u 'TVector3' - 11 - point "
"u 'genfit::StateOnPlane' - 1 - statePrediction g - - 0 'false' stopAtBoundary", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("extrapolateToCylinder",2214,G__genfitDict_262_0_4, 100, -1, -1, 0, 6, 1, 1, 8, 
"u 'genfit::StateOnPlane' - 11 - stateInput u 'TVector3' - 11 - linePoint "
"u 'TVector3' - 11 - lineDirection d - - 0 - radius "
"u 'genfit::StateOnPlane' - 1 - statePrediction g - - 0 'false' stopAtBoundary", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("extrapolateToSphere",2003,G__genfitDict_262_0_5, 100, -1, -1, 0, 5, 1, 1, 8, 
"u 'genfit::StateOnPlane' - 11 - stateInput u 'TVector3' - 11 - point "
"d - - 0 - radius u 'genfit::StateOnPlane' - 1 - statePrediction "
"g - - 0 'false' stopAtBoundary", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getPos",626,G__genfitDict_262_0_6, 117, G__get_linked_tagnum(&G__genfitDictLN_TVector3), -1, 0, 1, 1, 1, 8, "u 'genfit::StateOnPlane' - 11 - stateInput", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getMom",617,G__genfitDict_262_0_7, 117, G__get_linked_tagnum(&G__genfitDictLN_TVector3), -1, 0, 1, 1, 1, 8, "u 'genfit::StateOnPlane' - 11 - stateInput", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("extrapolateToTrackPoint",2411,G__genfitDict_262_0_8, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   // automatic default constructor
   G__memfunc_setup("AbsTrackRep", 1074, G__genfitDict_262_0_9, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsTrackRep), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("AbsTrackRep", 1074, G__genfitDict_262_0_10, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsTrackRep), -1, 0, 1, 1, 1, 0, "u 'genfit::AbsTrackRep' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AbsTrackRep", 1200, G__genfitDict_262_0_11, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__genfitDict_262_0_12, (int) ('u'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsTrackRep), -1, 1, 1, 1, 1, 0, "u 'genfit::AbsTrackRep' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLStateOnPlane(void) {
   /* genfit::StateOnPlane */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLStateOnPlane));
   G__memfunc_setup("StateOnPlane",1198,G__genfitDict_263_0_1, 105, G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLStateOnPlane), -1, 0, 2, 1, 1, 0, 
"u 'genfit::DetPlane' - 0 - plane u 'TVectorT<double>' 'TVectorD' 0 - state", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("StateOnPlane", 1198, G__genfitDict_263_0_2, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLStateOnPlane), -1, 0, 1, 1, 1, 0, "u 'genfit::StateOnPlane' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~StateOnPlane", 1324, G__genfitDict_263_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__genfitDict_263_0_4, (int) ('u'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLStateOnPlane), -1, 1, 1, 1, 1, 0, "u 'genfit::StateOnPlane' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLMeasuredStateOnPlane(void) {
   /* genfit::MeasuredStateOnPlane */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLMeasuredStateOnPlane));
   // automatic default constructor
   G__memfunc_setup("MeasuredStateOnPlane", 2020, G__genfitDict_264_0_1, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLMeasuredStateOnPlane), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("MeasuredStateOnPlane", 2020, G__genfitDict_264_0_2, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLMeasuredStateOnPlane), -1, 0, 1, 1, 1, 0, "u 'genfit::MeasuredStateOnPlane' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MeasuredStateOnPlane", 2146, G__genfitDict_264_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__genfitDict_264_0_4, (int) ('u'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLMeasuredStateOnPlane), -1, 1, 1, 1, 1, 0, "u 'genfit::MeasuredStateOnPlane' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLKalmanFittedStateOnPlane(void) {
   /* genfit::KalmanFittedStateOnPlane */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLKalmanFittedStateOnPlane));
   // automatic default constructor
   G__memfunc_setup("KalmanFittedStateOnPlane", 2402, G__genfitDict_265_0_1, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLKalmanFittedStateOnPlane), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("KalmanFittedStateOnPlane", 2402, G__genfitDict_265_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLKalmanFittedStateOnPlane), -1, 0, 1, 1, 1, 0, "u 'genfit::KalmanFittedStateOnPlane' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~KalmanFittedStateOnPlane", 2528, G__genfitDict_265_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__genfitDict_265_0_4, (int) ('u'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLKalmanFittedStateOnPlane), -1, 1, 1, 1, 1, 0, "u 'genfit::KalmanFittedStateOnPlane' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLReferenceStateOnPlane(void) {
   /* genfit::ReferenceStateOnPlane */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLReferenceStateOnPlane));
   // automatic default constructor
   G__memfunc_setup("ReferenceStateOnPlane", 2109, G__genfitDict_267_0_1, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLReferenceStateOnPlane), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("ReferenceStateOnPlane", 2109, G__genfitDict_267_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLReferenceStateOnPlane), -1, 0, 1, 1, 1, 0, "u 'genfit::ReferenceStateOnPlane' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ReferenceStateOnPlane", 2235, G__genfitDict_267_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__genfitDict_267_0_4, (int) ('u'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLReferenceStateOnPlane), -1, 1, 1, 1, 1, 0, "u 'genfit::ReferenceStateOnPlane' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLKalmanFitterInfo(void) {
   /* genfit::KalmanFitterInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLKalmanFitterInfo));
   G__memfunc_setup("getBiasedSmoothedState",2252,G__genfitDict_268_0_1, 117, G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLMeasuredStateOnPlane), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getUnbiasedSmoothedState",2479,G__genfitDict_268_0_2, 117, G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLMeasuredStateOnPlane), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getBiasedResidual",1729,G__genfitDict_268_0_3, 117, G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLStateOnPlane), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getUnbiasedResidual",1956,G__genfitDict_268_0_4, 117, G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLStateOnPlane), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   // automatic default constructor
   G__memfunc_setup("KalmanFitterInfo", 1614, G__genfitDict_268_0_5, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLKalmanFitterInfo), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("KalmanFitterInfo", 1614, G__genfitDict_268_0_6, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLKalmanFitterInfo), -1, 0, 1, 1, 1, 0, "u 'genfit::KalmanFitterInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~KalmanFitterInfo", 1740, G__genfitDict_268_0_7, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__genfitDict_268_0_8, (int) ('u'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLKalmanFitterInfo), -1, 1, 1, 1, 1, 0, "u 'genfit::KalmanFitterInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLTrackPoint(void) {
   /* genfit::TrackPoint */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLTrackPoint));
   // automatic default constructor
   G__memfunc_setup("TrackPoint", 1023, G__genfitDict_273_0_1, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLTrackPoint), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("TrackPoint", 1023, G__genfitDict_273_0_2, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLTrackPoint), -1, 0, 1, 1, 1, 0, "u 'genfit::TrackPoint' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TrackPoint", 1149, G__genfitDict_273_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__genfitDict_273_0_4, (int) ('u'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLTrackPoint), -1, 1, 1, 1, 1, 0, "u 'genfit::TrackPoint' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLAbsMeasurement(void) {
   /* genfit::AbsMeasurement */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsMeasurement));
   G__memfunc_setup("constructMeasurementOnPlane",2840,G__genfitDict_274_0_1, 117, G__get_linked_tagnum(&G__genfitDictLN_MeasurementOnPlane), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   // automatic default constructor
   G__memfunc_setup("AbsMeasurement", 1436, G__genfitDict_274_0_2, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsMeasurement), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("AbsMeasurement", 1436, G__genfitDict_274_0_3, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsMeasurement), -1, 0, 1, 1, 1, 0, "u 'genfit::AbsMeasurement' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~AbsMeasurement", 1562, G__genfitDict_274_0_4, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__genfitDict_274_0_5, (int) ('u'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLAbsMeasurement), -1, 1, 1, 1, 1, 0, "u 'genfit::AbsMeasurement' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLSpacePointMeasurement(void) {
   /* genfit::SpacePointMeasurement */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLSpacePointMeasurement));
   // automatic default constructor
   G__memfunc_setup("SpacePointMeasurement", 2172, G__genfitDict_275_0_1, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLSpacePointMeasurement), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("SpacePointMeasurement", 2172, G__genfitDict_275_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLSpacePointMeasurement), -1, 0, 1, 1, 1, 0, "u 'genfit::SpacePointMeasurement' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SpacePointMeasurement", 2298, G__genfitDict_275_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__genfitDict_275_0_4, (int) ('u'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLSpacePointMeasurement), -1, 1, 1, 1, 1, 0, "u 'genfit::SpacePointMeasurement' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLProlateSpacePointMeasurement(void) {
   /* genfit::ProlateSpacePointMeasurement */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLProlateSpacePointMeasurement));
   // automatic default constructor
   G__memfunc_setup("ProlateSpacePointMeasurement", 2899, G__genfitDict_276_0_1, (int) ('i'), 
G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLProlateSpacePointMeasurement), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("ProlateSpacePointMeasurement", 2899, G__genfitDict_276_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLProlateSpacePointMeasurement), -1, 0, 1, 1, 1, 0, "u 'genfit::ProlateSpacePointMeasurement' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~ProlateSpacePointMeasurement", 3025, G__genfitDict_276_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__genfitDict_276_0_4, (int) ('u'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLProlateSpacePointMeasurement), -1, 1, 1, 1, 1, 0, "u 'genfit::ProlateSpacePointMeasurement' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLTrackCandHit(void) {
   /* genfit::TrackCandHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLTrackCandHit));
   // automatic default constructor
   G__memfunc_setup("TrackCandHit", 1168, G__genfitDict_277_0_1, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLTrackCandHit), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("TrackCandHit", 1168, G__genfitDict_277_0_2, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLTrackCandHit), -1, 0, 1, 1, 1, 0, "u 'genfit::TrackCandHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TrackCandHit", 1294, G__genfitDict_277_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__genfitDict_277_0_4, (int) ('u'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLTrackCandHit), -1, 1, 1, 1, 1, 0, "u 'genfit::TrackCandHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLMaterialInfo(void) {
   /* genfit::MaterialInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLMaterialInfo));
   // automatic default constructor
   G__memfunc_setup("MaterialInfo", 1211, G__genfitDict_278_0_1, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLMaterialInfo), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("MaterialInfo", 1211, G__genfitDict_278_0_2, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLMaterialInfo), -1, 0, 1, 1, 1, 0, "u 'genfit::MaterialInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MaterialInfo", 1337, G__genfitDict_278_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__genfitDict_278_0_4, (int) ('u'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLMaterialInfo), -1, 1, 1, 1, 1, 0, "u 'genfit::MaterialInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLRectangularFinitePlane(void) {
   /* genfit::RectangularFinitePlane */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLRectangularFinitePlane));
   // automatic default constructor
   G__memfunc_setup("RectangularFinitePlane", 2247, G__genfitDict_279_0_1, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLRectangularFinitePlane), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("RectangularFinitePlane", 2247, G__genfitDict_279_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLRectangularFinitePlane), -1, 0, 1, 1, 1, 0, "u 'genfit::RectangularFinitePlane' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RectangularFinitePlane", 2373, G__genfitDict_279_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__genfitDict_279_0_4, (int) ('u'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLRectangularFinitePlane), -1, 1, 1, 1, 1, 0, "u 'genfit::RectangularFinitePlane' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLTrack(void) {
   /* genfit::Track */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLTrack));
   G__memfunc_setup("insertPoint",1183,G__genfitDict_280_0_1, 105, G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLTrack), -1, 0, 2, 1, 1, 0, 
"i - - 0 - i u 'genfit::TrackPoint' - 0 - point", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("removePoint",1176,G__genfitDict_280_0_2, 105, G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLTrack), -1, 0, 1, 1, 1, 0, "i - - 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("mergeTrack",1029,G__genfitDict_280_0_3, 105, G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLTrack), -1, 0, 2, 1, 1, 0, 
"i - - 0 - i u 'genfit::Track' - 0 - other", (char*)NULL, (void*) NULL, 1);
   // automatic default constructor
   G__memfunc_setup("Track", 501, G__genfitDict_280_0_4, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLTrack), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("Track", 501, G__genfitDict_280_0_5, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLTrack), -1, 0, 1, 1, 1, 0, "u 'genfit::Track' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Track", 627, G__genfitDict_280_0_6, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__genfitDict_280_0_7, (int) ('u'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLTrack), -1, 1, 1, 1, 1, 0, "u 'genfit::Track' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLPlanarMeasurement(void) {
   /* genfit::PlanarMeasurement */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLPlanarMeasurement));
   // automatic default constructor
   G__memfunc_setup("PlanarMeasurement", 1764, G__genfitDict_297_0_1, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLPlanarMeasurement), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("PlanarMeasurement", 1764, G__genfitDict_297_0_2, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLPlanarMeasurement), -1, 0, 1, 1, 1, 0, "u 'genfit::PlanarMeasurement' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~PlanarMeasurement", 1890, G__genfitDict_297_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__genfitDict_297_0_4, (int) ('u'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLPlanarMeasurement), -1, 1, 1, 1, 1, 0, "u 'genfit::PlanarMeasurement' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLWireMeasurement(void) {
   /* genfit::WireMeasurement */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLWireMeasurement));
   // automatic default constructor
   G__memfunc_setup("WireMeasurement", 1565, G__genfitDict_298_0_1, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLWireMeasurement), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("WireMeasurement", 1565, G__genfitDict_298_0_2, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLWireMeasurement), -1, 0, 1, 1, 1, 0, "u 'genfit::WireMeasurement' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~WireMeasurement", 1691, G__genfitDict_298_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__genfitDict_298_0_4, (int) ('u'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLWireMeasurement), -1, 1, 1, 1, 1, 0, "u 'genfit::WireMeasurement' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLPlanarPixelMeasurement(void) {
   /* genfit::PlanarPixelMeasurement */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLPlanarPixelMeasurement));
   // automatic default constructor
   G__memfunc_setup("PlanarPixelMeasurement", 2278, G__genfitDict_299_0_1, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLPlanarPixelMeasurement), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("PlanarPixelMeasurement", 2278, G__genfitDict_299_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLPlanarPixelMeasurement), -1, 0, 1, 1, 1, 0, "u 'genfit::PlanarPixelMeasurement' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~PlanarPixelMeasurement", 2404, G__genfitDict_299_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__genfitDict_299_0_4, (int) ('u'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLPlanarPixelMeasurement), -1, 1, 1, 1, 1, 0, "u 'genfit::PlanarPixelMeasurement' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLWirePointMeasurement(void) {
   /* genfit::WirePointMeasurement */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLWirePointMeasurement));
   // automatic default constructor
   G__memfunc_setup("WirePointMeasurement", 2087, G__genfitDict_300_0_1, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLWirePointMeasurement), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("WirePointMeasurement", 2087, G__genfitDict_300_0_2, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLWirePointMeasurement), -1, 0, 1, 1, 1, 0, "u 'genfit::WirePointMeasurement' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~WirePointMeasurement", 2213, G__genfitDict_300_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__genfitDict_300_0_4, (int) ('u'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLWirePointMeasurement), -1, 1, 1, 1, 1, 0, "u 'genfit::WirePointMeasurement' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLPlanarStripMeasurement(void) {
   /* genfit::PlanarStripMeasurement */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLPlanarStripMeasurement));
   // automatic default constructor
   G__memfunc_setup("PlanarStripMeasurement", 2294, G__genfitDict_301_0_1, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLPlanarStripMeasurement), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("PlanarStripMeasurement", 2294, G__genfitDict_301_0_2, (int) ('i'), 
G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLPlanarStripMeasurement), -1, 0, 1, 1, 1, 0, "u 'genfit::PlanarStripMeasurement' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~PlanarStripMeasurement", 2420, G__genfitDict_301_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__genfitDict_301_0_4, (int) ('u'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLPlanarStripMeasurement), -1, 1, 1, 1, 1, 0, "u 'genfit::PlanarStripMeasurement' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncgenfitcLcLTrackCand(void) {
   /* genfit::TrackCand */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLTrackCand));
   // automatic default constructor
   G__memfunc_setup("TrackCand", 875, G__genfitDict_302_0_1, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLTrackCand), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("TrackCand", 875, G__genfitDict_302_0_2, (int) ('i'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLTrackCand), -1, 0, 1, 1, 1, 0, "u 'genfit::TrackCand' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~TrackCand", 1001, G__genfitDict_302_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__genfitDict_302_0_4, (int) ('u'), G__get_linked_tagnum(&G__genfitDictLN_genfitcLcLTrackCand), -1, 1, 1, 1, 1, 0, "u 'genfit::TrackCand' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncgenfitDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalgenfitDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcgenfitDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__genfitDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_genfit = { "genfit" , 110 , -1 };
G__linked_taginfo G__genfitDictLN_genfitcLcLAbsFinitePlane = { "genfit::AbsFinitePlane" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_genfitcLcLAbsFitterInfo = { "genfit::AbsFitterInfo" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TElementActionTlEdoublegR = { "TElementActionT<double>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TElementPosActionTlEdoublegR = { "TElementPosActionT<double>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TMatrixTSymlEdoublegR = { "TMatrixTSym<double>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TMatrixTlEdoublegR = { "TMatrixT<double>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TMatrixTRow_constlEdoublegR = { "TMatrixTRow_const<double>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TMatrixTRowlEdoublegR = { "TMatrixTRow<double>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TMatrixTColumn_constlEdoublegR = { "TMatrixTColumn_const<double>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TMatrixTDiag_constlEdoublegR = { "TMatrixTDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TMatrixTFlat_constlEdoublegR = { "TMatrixTFlat_const<double>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TMatrixTSub_constlEdoublegR = { "TMatrixTSub_const<double>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TMatrixTSparseRow_constlEdoublegR = { "TMatrixTSparseRow_const<double>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TMatrixTSparselEdoublegR = { "TMatrixTSparse<double>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TMatrixTSparseDiag_constlEdoublegR = { "TMatrixTSparseDiag_const<double>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TMatrixTColumnlEdoublegR = { "TMatrixTColumn<double>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TMatrixTDiaglEdoublegR = { "TMatrixTDiag<double>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TMatrixTFlatlEdoublegR = { "TMatrixTFlat<double>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TMatrixTSublEdoublegR = { "TMatrixTSub<double>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TMatrixTSparseRowlEdoublegR = { "TMatrixTSparseRow<double>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TMatrixTSparseDiaglEdoublegR = { "TMatrixTSparseDiag<double>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_genfitcLcLDetPlane = { "genfit::DetPlane" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_genfitcLcLAbsTrackRep = { "genfit::AbsTrackRep" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_genfitcLcLStateOnPlane = { "genfit::StateOnPlane" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_genfitcLcLMeasuredStateOnPlane = { "genfit::MeasuredStateOnPlane" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_genfitcLcLKalmanFittedStateOnPlane = { "genfit::KalmanFittedStateOnPlane" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_MeasurementOnPlane = { "MeasurementOnPlane" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_genfitcLcLReferenceStateOnPlane = { "genfit::ReferenceStateOnPlane" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_genfitcLcLKalmanFitterInfo = { "genfit::KalmanFitterInfo" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_vectorlEMeasurementOnPlanecOallocatorlEMeasurementOnPlanegRsPgR = { "vector<MeasurementOnPlane,allocator<MeasurementOnPlane> >" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_reverse_iteratorlEvectorlEMeasurementOnPlanecOallocatorlEMeasurementOnPlanegRsPgRcLcLiteratorgR = { "reverse_iterator<vector<MeasurementOnPlane,allocator<MeasurementOnPlane> >::iterator>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_genfitcLcLTrackPoint = { "genfit::TrackPoint" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_genfitcLcLAbsMeasurement = { "genfit::AbsMeasurement" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_genfitcLcLSpacePointMeasurement = { "genfit::SpacePointMeasurement" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_genfitcLcLProlateSpacePointMeasurement = { "genfit::ProlateSpacePointMeasurement" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_genfitcLcLTrackCandHit = { "genfit::TrackCandHit" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_genfitcLcLMaterialInfo = { "genfit::MaterialInfo" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_genfitcLcLRectangularFinitePlane = { "genfit::RectangularFinitePlane" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_genfitcLcLTrack = { "genfit::Track" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_vectorlEgenfitcLcLAbsMeasurementmUcOallocatorlEgenfitcLcLAbsMeasurementmUgRsPgR = { "vector<genfit::AbsMeasurement*,allocator<genfit::AbsMeasurement*> >" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_reverse_iteratorlEvectorlEgenfitcLcLAbsMeasurementmUcOallocatorlEgenfitcLcLAbsMeasurementmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<genfit::AbsMeasurement*,allocator<genfit::AbsMeasurement*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_vectorlEgenfitcLcLKalmanFitterInfocOallocatorlEgenfitcLcLKalmanFitterInfogRsPgR = { "vector<genfit::KalmanFitterInfo,allocator<genfit::KalmanFitterInfo> >" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_reverse_iteratorlEvectorlEgenfitcLcLKalmanFitterInfocOallocatorlEgenfitcLcLKalmanFitterInfogRsPgRcLcLiteratorgR = { "reverse_iterator<vector<genfit::KalmanFitterInfo,allocator<genfit::KalmanFitterInfo> >::iterator>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_vectorlEgenfitcLcLTrackPointcOallocatorlEgenfitcLcLTrackPointgRsPgR = { "vector<genfit::TrackPoint,allocator<genfit::TrackPoint> >" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_reverse_iteratorlEvectorlEgenfitcLcLTrackPointcOallocatorlEgenfitcLcLTrackPointgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<genfit::TrackPoint,allocator<genfit::TrackPoint> >::iterator>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_vectorlEgenfitcLcLAbsTrackRepmUcOallocatorlEgenfitcLcLAbsTrackRepmUgRsPgR = { "vector<genfit::AbsTrackRep*,allocator<genfit::AbsTrackRep*> >" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_reverse_iteratorlEvectorlEgenfitcLcLAbsTrackRepmUcOallocatorlEgenfitcLcLAbsTrackRepmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<genfit::AbsTrackRep*,allocator<genfit::AbsTrackRep*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_genfitcLcLPlanarMeasurement = { "genfit::PlanarMeasurement" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_genfitcLcLWireMeasurement = { "genfit::WireMeasurement" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_genfitcLcLPlanarPixelMeasurement = { "genfit::PlanarPixelMeasurement" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_genfitcLcLWirePointMeasurement = { "genfit::WirePointMeasurement" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_genfitcLcLPlanarStripMeasurement = { "genfit::PlanarStripMeasurement" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_genfitcLcLTrackCand = { "genfit::TrackCand" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_vectorlEgenfitcLcLTrackCandHitcOallocatorlEgenfitcLcLTrackCandHitgRsPgR = { "vector<genfit::TrackCandHit,allocator<genfit::TrackCandHit> >" , 99 , -1 };
G__linked_taginfo G__genfitDictLN_reverse_iteratorlEvectorlEgenfitcLcLTrackCandHitcOallocatorlEgenfitcLcLTrackCandHitgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<genfit::TrackCandHit,allocator<genfit::TrackCandHit> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablegenfitDict() {
  G__genfitDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__genfitDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__genfitDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__genfitDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__genfitDictLN_genfit.tagnum = -1 ;
  G__genfitDictLN_genfitcLcLAbsFinitePlane.tagnum = -1 ;
  G__genfitDictLN_genfitcLcLAbsFitterInfo.tagnum = -1 ;
  G__genfitDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__genfitDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__genfitDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__genfitDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__genfitDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__genfitDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__genfitDictLN_TElementActionTlEdoublegR.tagnum = -1 ;
  G__genfitDictLN_TElementPosActionTlEdoublegR.tagnum = -1 ;
  G__genfitDictLN_TMatrixTSymlEdoublegR.tagnum = -1 ;
  G__genfitDictLN_TMatrixTlEdoublegR.tagnum = -1 ;
  G__genfitDictLN_TMatrixTRow_constlEdoublegR.tagnum = -1 ;
  G__genfitDictLN_TMatrixTRowlEdoublegR.tagnum = -1 ;
  G__genfitDictLN_TMatrixTColumn_constlEdoublegR.tagnum = -1 ;
  G__genfitDictLN_TMatrixTDiag_constlEdoublegR.tagnum = -1 ;
  G__genfitDictLN_TMatrixTFlat_constlEdoublegR.tagnum = -1 ;
  G__genfitDictLN_TMatrixTSub_constlEdoublegR.tagnum = -1 ;
  G__genfitDictLN_TMatrixTSparseRow_constlEdoublegR.tagnum = -1 ;
  G__genfitDictLN_TMatrixTSparselEdoublegR.tagnum = -1 ;
  G__genfitDictLN_TMatrixTSparseDiag_constlEdoublegR.tagnum = -1 ;
  G__genfitDictLN_TMatrixTColumnlEdoublegR.tagnum = -1 ;
  G__genfitDictLN_TMatrixTDiaglEdoublegR.tagnum = -1 ;
  G__genfitDictLN_TMatrixTFlatlEdoublegR.tagnum = -1 ;
  G__genfitDictLN_TMatrixTSublEdoublegR.tagnum = -1 ;
  G__genfitDictLN_TMatrixTSparseRowlEdoublegR.tagnum = -1 ;
  G__genfitDictLN_TMatrixTSparseDiaglEdoublegR.tagnum = -1 ;
  G__genfitDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__genfitDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__genfitDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__genfitDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__genfitDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__genfitDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__genfitDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__genfitDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__genfitDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__genfitDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__genfitDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__genfitDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__genfitDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__genfitDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__genfitDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__genfitDictLN_TVector3.tagnum = -1 ;
  G__genfitDictLN_genfitcLcLDetPlane.tagnum = -1 ;
  G__genfitDictLN_genfitcLcLAbsTrackRep.tagnum = -1 ;
  G__genfitDictLN_genfitcLcLStateOnPlane.tagnum = -1 ;
  G__genfitDictLN_genfitcLcLMeasuredStateOnPlane.tagnum = -1 ;
  G__genfitDictLN_genfitcLcLKalmanFittedStateOnPlane.tagnum = -1 ;
  G__genfitDictLN_MeasurementOnPlane.tagnum = -1 ;
  G__genfitDictLN_genfitcLcLReferenceStateOnPlane.tagnum = -1 ;
  G__genfitDictLN_genfitcLcLKalmanFitterInfo.tagnum = -1 ;
  G__genfitDictLN_vectorlEMeasurementOnPlanecOallocatorlEMeasurementOnPlanegRsPgR.tagnum = -1 ;
  G__genfitDictLN_reverse_iteratorlEvectorlEMeasurementOnPlanecOallocatorlEMeasurementOnPlanegRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__genfitDictLN_genfitcLcLTrackPoint.tagnum = -1 ;
  G__genfitDictLN_genfitcLcLAbsMeasurement.tagnum = -1 ;
  G__genfitDictLN_genfitcLcLSpacePointMeasurement.tagnum = -1 ;
  G__genfitDictLN_genfitcLcLProlateSpacePointMeasurement.tagnum = -1 ;
  G__genfitDictLN_genfitcLcLTrackCandHit.tagnum = -1 ;
  G__genfitDictLN_genfitcLcLMaterialInfo.tagnum = -1 ;
  G__genfitDictLN_genfitcLcLRectangularFinitePlane.tagnum = -1 ;
  G__genfitDictLN_genfitcLcLTrack.tagnum = -1 ;
  G__genfitDictLN_vectorlEgenfitcLcLAbsMeasurementmUcOallocatorlEgenfitcLcLAbsMeasurementmUgRsPgR.tagnum = -1 ;
  G__genfitDictLN_reverse_iteratorlEvectorlEgenfitcLcLAbsMeasurementmUcOallocatorlEgenfitcLcLAbsMeasurementmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__genfitDictLN_vectorlEgenfitcLcLKalmanFitterInfocOallocatorlEgenfitcLcLKalmanFitterInfogRsPgR.tagnum = -1 ;
  G__genfitDictLN_reverse_iteratorlEvectorlEgenfitcLcLKalmanFitterInfocOallocatorlEgenfitcLcLKalmanFitterInfogRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__genfitDictLN_vectorlEgenfitcLcLTrackPointcOallocatorlEgenfitcLcLTrackPointgRsPgR.tagnum = -1 ;
  G__genfitDictLN_reverse_iteratorlEvectorlEgenfitcLcLTrackPointcOallocatorlEgenfitcLcLTrackPointgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__genfitDictLN_vectorlEgenfitcLcLAbsTrackRepmUcOallocatorlEgenfitcLcLAbsTrackRepmUgRsPgR.tagnum = -1 ;
  G__genfitDictLN_reverse_iteratorlEvectorlEgenfitcLcLAbsTrackRepmUcOallocatorlEgenfitcLcLAbsTrackRepmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__genfitDictLN_genfitcLcLPlanarMeasurement.tagnum = -1 ;
  G__genfitDictLN_genfitcLcLWireMeasurement.tagnum = -1 ;
  G__genfitDictLN_genfitcLcLPlanarPixelMeasurement.tagnum = -1 ;
  G__genfitDictLN_genfitcLcLWirePointMeasurement.tagnum = -1 ;
  G__genfitDictLN_genfitcLcLPlanarStripMeasurement.tagnum = -1 ;
  G__genfitDictLN_genfitcLcLTrackCand.tagnum = -1 ;
  G__genfitDictLN_vectorlEgenfitcLcLTrackCandHitcOallocatorlEgenfitcLcLTrackCandHitgRsPgR.tagnum = -1 ;
  G__genfitDictLN_reverse_iteratorlEvectorlEgenfitcLcLTrackCandHitcOallocatorlEgenfitcLcLTrackCandHitgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablegenfitDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__genfitDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_genfit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__genfitDictLN_genfitcLcLAbsFinitePlane),sizeof(genfit::AbsFinitePlane),-1,262144,(char*)NULL,G__setup_memvargenfitcLcLAbsFinitePlane,G__setup_memfuncgenfitcLcLAbsFinitePlane);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__genfitDictLN_genfitcLcLAbsFitterInfo),sizeof(genfit::AbsFitterInfo),-1,262144,(char*)NULL,G__setup_memvargenfitcLcLAbsFitterInfo,G__setup_memfuncgenfitcLcLAbsFitterInfo);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TElementActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TElementPosActionTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TMatrixTSymlEdoublegR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TMatrixTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TMatrixTRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TMatrixTRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TMatrixTColumn_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TMatrixTDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TMatrixTFlat_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TMatrixTSub_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TMatrixTSparseRow_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TMatrixTSparselEdoublegR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TMatrixTSparseDiag_constlEdoublegR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TMatrixTColumnlEdoublegR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TMatrixTDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TMatrixTFlatlEdoublegR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TMatrixTSublEdoublegR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TMatrixTSparseRowlEdoublegR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TMatrixTSparseDiaglEdoublegR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_TVector3);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__genfitDictLN_genfitcLcLDetPlane),sizeof(genfit::DetPlane),-1,262144,(char*)NULL,G__setup_memvargenfitcLcLDetPlane,G__setup_memfuncgenfitcLcLDetPlane);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__genfitDictLN_genfitcLcLAbsTrackRep),sizeof(genfit::AbsTrackRep),-1,262144,(char*)NULL,G__setup_memvargenfitcLcLAbsTrackRep,G__setup_memfuncgenfitcLcLAbsTrackRep);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__genfitDictLN_genfitcLcLStateOnPlane),sizeof(genfit::StateOnPlane),-1,294912,(char*)NULL,G__setup_memvargenfitcLcLStateOnPlane,G__setup_memfuncgenfitcLcLStateOnPlane);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__genfitDictLN_genfitcLcLMeasuredStateOnPlane),sizeof(genfit::MeasuredStateOnPlane),-1,294912,(char*)NULL,G__setup_memvargenfitcLcLMeasuredStateOnPlane,G__setup_memfuncgenfitcLcLMeasuredStateOnPlane);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__genfitDictLN_genfitcLcLKalmanFittedStateOnPlane),sizeof(genfit::KalmanFittedStateOnPlane),-1,294912,(char*)NULL,G__setup_memvargenfitcLcLKalmanFittedStateOnPlane,G__setup_memfuncgenfitcLcLKalmanFittedStateOnPlane);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_MeasurementOnPlane);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__genfitDictLN_genfitcLcLReferenceStateOnPlane),sizeof(genfit::ReferenceStateOnPlane),-1,294912,(char*)NULL,G__setup_memvargenfitcLcLReferenceStateOnPlane,G__setup_memfuncgenfitcLcLReferenceStateOnPlane);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__genfitDictLN_genfitcLcLKalmanFitterInfo),sizeof(genfit::KalmanFitterInfo),-1,262144,(char*)NULL,G__setup_memvargenfitcLcLKalmanFitterInfo,G__setup_memfuncgenfitcLcLKalmanFitterInfo);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_vectorlEMeasurementOnPlanecOallocatorlEMeasurementOnPlanegRsPgR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_reverse_iteratorlEvectorlEMeasurementOnPlanecOallocatorlEMeasurementOnPlanegRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__genfitDictLN_genfitcLcLTrackPoint),sizeof(genfit::TrackPoint),-1,262144,(char*)NULL,G__setup_memvargenfitcLcLTrackPoint,G__setup_memfuncgenfitcLcLTrackPoint);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__genfitDictLN_genfitcLcLAbsMeasurement),sizeof(genfit::AbsMeasurement),-1,262144,(char*)NULL,G__setup_memvargenfitcLcLAbsMeasurement,G__setup_memfuncgenfitcLcLAbsMeasurement);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__genfitDictLN_genfitcLcLSpacePointMeasurement),sizeof(genfit::SpacePointMeasurement),-1,262144,(char*)NULL,G__setup_memvargenfitcLcLSpacePointMeasurement,G__setup_memfuncgenfitcLcLSpacePointMeasurement);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__genfitDictLN_genfitcLcLProlateSpacePointMeasurement),sizeof(genfit::ProlateSpacePointMeasurement),-1,262144,(char*)NULL,G__setup_memvargenfitcLcLProlateSpacePointMeasurement,G__setup_memfuncgenfitcLcLProlateSpacePointMeasurement);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__genfitDictLN_genfitcLcLTrackCandHit),sizeof(genfit::TrackCandHit),-1,262144,(char*)NULL,G__setup_memvargenfitcLcLTrackCandHit,G__setup_memfuncgenfitcLcLTrackCandHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__genfitDictLN_genfitcLcLMaterialInfo),sizeof(genfit::MaterialInfo),-1,262144,(char*)NULL,G__setup_memvargenfitcLcLMaterialInfo,G__setup_memfuncgenfitcLcLMaterialInfo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__genfitDictLN_genfitcLcLRectangularFinitePlane),sizeof(genfit::RectangularFinitePlane),-1,262144,(char*)NULL,G__setup_memvargenfitcLcLRectangularFinitePlane,G__setup_memfuncgenfitcLcLRectangularFinitePlane);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__genfitDictLN_genfitcLcLTrack),sizeof(genfit::Track),-1,262144,(char*)NULL,G__setup_memvargenfitcLcLTrack,G__setup_memfuncgenfitcLcLTrack);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_vectorlEgenfitcLcLAbsMeasurementmUcOallocatorlEgenfitcLcLAbsMeasurementmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_reverse_iteratorlEvectorlEgenfitcLcLAbsMeasurementmUcOallocatorlEgenfitcLcLAbsMeasurementmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_vectorlEgenfitcLcLKalmanFitterInfocOallocatorlEgenfitcLcLKalmanFitterInfogRsPgR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_reverse_iteratorlEvectorlEgenfitcLcLKalmanFitterInfocOallocatorlEgenfitcLcLKalmanFitterInfogRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_vectorlEgenfitcLcLTrackPointcOallocatorlEgenfitcLcLTrackPointgRsPgR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_reverse_iteratorlEvectorlEgenfitcLcLTrackPointcOallocatorlEgenfitcLcLTrackPointgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_vectorlEgenfitcLcLAbsTrackRepmUcOallocatorlEgenfitcLcLAbsTrackRepmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_reverse_iteratorlEvectorlEgenfitcLcLAbsTrackRepmUcOallocatorlEgenfitcLcLAbsTrackRepmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__genfitDictLN_genfitcLcLPlanarMeasurement),sizeof(genfit::PlanarMeasurement),-1,262144,(char*)NULL,G__setup_memvargenfitcLcLPlanarMeasurement,G__setup_memfuncgenfitcLcLPlanarMeasurement);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__genfitDictLN_genfitcLcLWireMeasurement),sizeof(genfit::WireMeasurement),-1,262144,(char*)NULL,G__setup_memvargenfitcLcLWireMeasurement,G__setup_memfuncgenfitcLcLWireMeasurement);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__genfitDictLN_genfitcLcLPlanarPixelMeasurement),sizeof(genfit::PlanarPixelMeasurement),-1,262144,(char*)NULL,G__setup_memvargenfitcLcLPlanarPixelMeasurement,G__setup_memfuncgenfitcLcLPlanarPixelMeasurement);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__genfitDictLN_genfitcLcLWirePointMeasurement),sizeof(genfit::WirePointMeasurement),-1,262144,(char*)NULL,G__setup_memvargenfitcLcLWirePointMeasurement,G__setup_memfuncgenfitcLcLWirePointMeasurement);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__genfitDictLN_genfitcLcLPlanarStripMeasurement),sizeof(genfit::PlanarStripMeasurement),-1,262144,(char*)NULL,G__setup_memvargenfitcLcLPlanarStripMeasurement,G__setup_memfuncgenfitcLcLPlanarStripMeasurement);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__genfitDictLN_genfitcLcLTrackCand),sizeof(genfit::TrackCand),-1,262144,(char*)NULL,G__setup_memvargenfitcLcLTrackCand,G__setup_memfuncgenfitcLcLTrackCand);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_vectorlEgenfitcLcLTrackCandHitcOallocatorlEgenfitcLcLTrackCandHitgRsPgR);
   G__get_linked_tagnum_fwd(&G__genfitDictLN_reverse_iteratorlEvectorlEgenfitcLcLTrackCandHitcOallocatorlEgenfitcLcLTrackCandHitgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupgenfitDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupgenfitDict()");
  G__set_cpp_environmentgenfitDict();
  G__cpp_setup_tagtablegenfitDict();

  G__cpp_setup_inheritancegenfitDict();

  G__cpp_setup_typetablegenfitDict();

  G__cpp_setup_memvargenfitDict();

  G__cpp_setup_memfuncgenfitDict();
  G__cpp_setup_globalgenfitDict();
  G__cpp_setup_funcgenfitDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncgenfitDict();
  return;
}
class G__cpp_setup_initgenfitDict {
  public:
    G__cpp_setup_initgenfitDict() { G__add_setup_func("genfitDict",(G__incsetup)(&G__cpp_setupgenfitDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initgenfitDict() { G__remove_setup_func("genfitDict"); }
};
G__cpp_setup_initgenfitDict G__cpp_setup_initializergenfitDict;

